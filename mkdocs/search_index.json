{
    "docs": [
        {
            "location": "/",
            "text": "MkDocs\n\uf0c1\n\n\nProject documentation with\u00a0Markdown.\n\n\n\n\nOverview\n\uf0c1\n\n\nMkDocs is a \nfast\n, \nsimple\n and \ndownright gorgeous\n static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.\n\n\nHost anywhere\n\uf0c1\n\n\nMkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or \nanywhere\n else you choose.\n\n\nGreat themes available\n\uf0c1\n\n\nThere's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes: \nmkdocs\n and \nreadthedocs\n, select one of the 3rd\nparty themes in the \nMkDocs wiki\n, or \nbuild your own\n.\n\n\nPreview your site as you work\n\uf0c1\n\n\nThe built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.\n\n\nEasy to customize\n\uf0c1\n\n\nGet your project documentation looking just the way you want it by customizing\nthe theme.\n\n\n\n\nInstallation\n\uf0c1\n\n\nIn order to install MkDocs you'll need \nPython\n installed on your system, as\nwell as the Python package manager, \npip\n. You can check if you have these\nalready installed from the command line:\n\n\n$ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2\n\n\n\n\nMkDocs supports Python versions 2.6, 2.7, 3.3, 3.4 and 3.5.\n\n\nOn Windows it is recommended that you install Python and pip with \nChocolatey\n.\n\n\nInstall the \nmkdocs\n package using pip:\n\n\npip install mkdocs\n\n\n\n\nYou should now have the \nmkdocs\n command installed on your system. Run \nmkdocs\n--version\n to check that everything worked okay.\n\n\n$ mkdocs --version\nmkdocs, version 0.15.3\n\n\n\n\n\n\nGetting started\n\uf0c1\n\n\nGetting started is super easy.\n\n\nmkdocs new my-project\ncd my-project\n\n\n\n\nTake a moment to review the initial project that has been created for you.\n\n\n\n\nThere's a single configuration file named \nmkdocs.yml\n, and a folder named\n\ndocs\n that will contain your documentation source files. Right now the \ndocs\n\nfolder just contains a single documentation page, named \nindex.md\n.\n\n\nMkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the \nmkdocs.yml\n\nconfiguration file, and then start the server by running the \nmkdocs serve\n\ncommand:\n\n\n$ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes\n\n\n\n\nOpen up \nhttp://127.0.0.1:8000/\n in your browser, and you'll see the default\nhome page being displayed:\n\n\n\n\nThe dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.\n\n\nOpen the \ndocs/index.md\n document in your text editor of choice, change the\ninitial heading to \nMkLorum\n, and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.\n\n\nNow try editing the configuration file: \nmkdocs.yml\n. Change the\n\nsite_name\n setting to \nMkLorum\n and save the file.\n\n\nsite_name: MkLorum\n\n\n\n\nYour browser should immediately reload, and you'll see your new site name take\neffect.\n\n\n\n\nAdding pages\n\uf0c1\n\n\nNow add a second page to your documentation:\n\n\ncurl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md\n\n\n\n\nAs our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a \npages\n\nsetting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\n\n\n\n\nSave your changes and you'll now see a navigation bar with \nHome\n and \nAbout\n\nitems on the left as well as \nSearch\n, \nPrevious\n, and \nNext\n items on the\nright.\n\n\n\n\nTry the menu items and navigate back and forth between pages. Then click on\n\nSearch\n. A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!\n\n\n\n\nTheming our documentation\n\uf0c1\n\n\nNow change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the \nmkdocs.yml\n file and add a \ntheme\n setting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs\n\n\n\n\nSave your changes, and you'll see the ReadTheDocs theme being used.\n\n\n\n\nBuilding the site\n\uf0c1\n\n\nThat's looking good. You're ready to deploy the first pass of your \nMkLorum\n\ndocumentation. First build the documentation:\n\n\nmkdocs build\n\n\n\n\nThis will create a new directory, named \nsite\n. Take a look inside the\ndirectory:\n\n\n$ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml\n\n\n\n\nNotice that your source documentation has been output as two HTML files named\n\nindex.html\n and \nabout/index.html\n. You also have various other media that's\nbeen copied into the \nsite\n directory as part of the documentation theme. You\neven have a \nsitemap.xml\n file and \nmkdocs/search_index.json\n.\n\n\nIf you're using source code control such as \ngit\n you probably don't want to\ncheck your documentation builds into the repository. Add a line containing\n\nsite/\n to your \n.gitignore\n file.\n\n\necho \"site/\" >> .gitignore\n\n\n\n\nIf you're using another source code control tool you'll want to check it's\ndocumentation on how to ignore specific directories.\n\n\nAfter some time, files may be removed from the documentation but they will still\nreside in the \nsite\n directory. To remove those stale files, just run \nmkdocs\n\nwith the \n--clean\n switch.\n\n\nmkdocs build --clean\n\n\n\n\nOther Commands and Options\n\uf0c1\n\n\nThere are various other commands and options available. For a complete list of\ncommands, use the \n--help\n flag:\n\n\nmkdocs --help\n\n\n\n\nTo view a list of options available on a given command, use the \n--help\n flag\nwith that command. For example, to get a list of all options available for the\n\nbuild\n command run the following:\n\n\nmkdocs build --help\n\n\n\n\nDeploying\n\uf0c1\n\n\nThe documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere. \nGitHub project pages\n and \nAmazon\nS3\n may be good hosting options, depending upon your needs. Upload the contents\nof the entire \nsite\n directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the\n\nDeploying your Docs\n page.\n\n\nGetting help\n\uf0c1\n\n\nTo get help with MkDocs, please use the \ndiscussion group\n, \nGitHub issues\n or\nthe MkDocs IRC channel \n#mkdocs\n on freenode.",
            "title": "Home"
        },
        {
            "location": "/#mkdocs",
            "text": "Project documentation with\u00a0Markdown.",
            "title": "MkDocs"
        },
        {
            "location": "/#overview",
            "text": "MkDocs is a  fast ,  simple  and  downright gorgeous  static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.",
            "title": "Overview"
        },
        {
            "location": "/#host-anywhere",
            "text": "MkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or  anywhere  else you choose.",
            "title": "Host anywhere"
        },
        {
            "location": "/#great-themes-available",
            "text": "There's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes:  mkdocs  and  readthedocs , select one of the 3rd\nparty themes in the  MkDocs wiki , or  build your own .",
            "title": "Great themes available"
        },
        {
            "location": "/#preview-your-site-as-you-work",
            "text": "The built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.",
            "title": "Preview your site as you work"
        },
        {
            "location": "/#easy-to-customize",
            "text": "Get your project documentation looking just the way you want it by customizing\nthe theme.",
            "title": "Easy to customize"
        },
        {
            "location": "/#installation",
            "text": "In order to install MkDocs you'll need  Python  installed on your system, as\nwell as the Python package manager,  pip . You can check if you have these\nalready installed from the command line:  $ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2  MkDocs supports Python versions 2.6, 2.7, 3.3, 3.4 and 3.5.  On Windows it is recommended that you install Python and pip with  Chocolatey .  Install the  mkdocs  package using pip:  pip install mkdocs  You should now have the  mkdocs  command installed on your system. Run  mkdocs\n--version  to check that everything worked okay.  $ mkdocs --version\nmkdocs, version 0.15.3",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "Getting started is super easy.  mkdocs new my-project\ncd my-project  Take a moment to review the initial project that has been created for you.   There's a single configuration file named  mkdocs.yml , and a folder named docs  that will contain your documentation source files. Right now the  docs \nfolder just contains a single documentation page, named  index.md .  MkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the  mkdocs.yml \nconfiguration file, and then start the server by running the  mkdocs serve \ncommand:  $ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes  Open up  http://127.0.0.1:8000/  in your browser, and you'll see the default\nhome page being displayed:   The dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.  Open the  docs/index.md  document in your text editor of choice, change the\ninitial heading to  MkLorum , and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.  Now try editing the configuration file:  mkdocs.yml . Change the site_name  setting to  MkLorum  and save the file.  site_name: MkLorum  Your browser should immediately reload, and you'll see your new site name take\neffect.",
            "title": "Getting started"
        },
        {
            "location": "/#adding-pages",
            "text": "Now add a second page to your documentation:  curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md  As our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a  pages \nsetting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md  Save your changes and you'll now see a navigation bar with  Home  and  About \nitems on the left as well as  Search ,  Previous , and  Next  items on the\nright.   Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!",
            "title": "Adding pages"
        },
        {
            "location": "/#theming-our-documentation",
            "text": "Now change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the  mkdocs.yml  file and add a  theme  setting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs  Save your changes, and you'll see the ReadTheDocs theme being used.",
            "title": "Theming our documentation"
        },
        {
            "location": "/#building-the-site",
            "text": "That's looking good. You're ready to deploy the first pass of your  MkLorum \ndocumentation. First build the documentation:  mkdocs build  This will create a new directory, named  site . Take a look inside the\ndirectory:  $ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml  Notice that your source documentation has been output as two HTML files named index.html  and  about/index.html . You also have various other media that's\nbeen copied into the  site  directory as part of the documentation theme. You\neven have a  sitemap.xml  file and  mkdocs/search_index.json .  If you're using source code control such as  git  you probably don't want to\ncheck your documentation builds into the repository. Add a line containing site/  to your  .gitignore  file.  echo \"site/\" >> .gitignore  If you're using another source code control tool you'll want to check it's\ndocumentation on how to ignore specific directories.  After some time, files may be removed from the documentation but they will still\nreside in the  site  directory. To remove those stale files, just run  mkdocs \nwith the  --clean  switch.  mkdocs build --clean",
            "title": "Building the site"
        },
        {
            "location": "/#other-commands-and-options",
            "text": "There are various other commands and options available. For a complete list of\ncommands, use the  --help  flag:  mkdocs --help  To view a list of options available on a given command, use the  --help  flag\nwith that command. For example, to get a list of all options available for the build  command run the following:  mkdocs build --help",
            "title": "Other Commands and Options"
        },
        {
            "location": "/#deploying",
            "text": "The documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere.  GitHub project pages  and  Amazon\nS3  may be good hosting options, depending upon your needs. Upload the contents\nof the entire  site  directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the Deploying your Docs  page.",
            "title": "Deploying"
        },
        {
            "location": "/#getting-help",
            "text": "To get help with MkDocs, please use the  discussion group ,  GitHub issues  or\nthe MkDocs IRC channel  #mkdocs  on freenode.",
            "title": "Getting help"
        },
        {
            "location": "/user-guide/writing-your-docs/",
            "text": "Writing your docs\n\uf0c1\n\n\nHow to write and layout your markdown source files.\n\n\n\n\nConfigure Pages and Navigation\n\uf0c1\n\n\nThe \npages configuration\n in your\n\nmkdocs.yml\n defines which pages are built by MkDocs and how they appear in the\ndocumentation navigation. If not provided, the pages configuration will be\nautomatically created by discovering all the Markdown files in the\n\ndocumentation directory\n.\n\n\nA simple pages configuration looks like this:\n\n\npages:\n- 'index.md'\n- 'about.md'\n\n\n\n\nWith this example we will build two pages at the top level and they will\nautomatically have their titles inferred from the filename. Assuming \ndocs_dir\n\nhas the default value, \ndocs\n, the source files for this documentation would be\n\ndocs/index.md\n and \ndocs/about.md\n. To provide a custom name for these pages,\nthey can be added before the filename.\n\n\npages:\n- Home: 'index.md'\n- About: 'about.md'\n\n\n\n\nMultilevel documentation\n\uf0c1\n\n\nSubsections can be created by listing related pages together under a section\ntitle. For example:\n\n\npages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'\n\n\n\n\nWith the above configuration we have three top level sections: Home, User Guide\nand About. Then under User Guide we have two pages, Writing your docs and\nStyling your docs. Under the About section we also have two pages, License and\nRelease Notes.\n\n\nFile layout\n\uf0c1\n\n\nYour documentation source should be written as regular Markdown files, and\nplaced in a directory somewhere in your project. Normally this directory will be\nnamed \ndocs\n and will exist at the top level of your project, alongside the\n\nmkdocs.yml\n configuration file.\n\n\nThe simplest project you can create will look something like this:\n\n\nmkdocs.yml\ndocs/\n    index.md\n\n\n\n\nBy convention your project homepage should always be named \nindex\n. Any of the\nfollowing extensions may be used for your Markdown source files: \nmarkdown\n,\n\nmdown\n, \nmkdn\n, \nmkd\n, \nmd\n.\n\n\nYou can also create multi-page documentation, by creating several markdown\nfiles:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md\n\n\n\n\nThe file layout you use determines the URLs that are used for the generated\npages. Given the above layout, pages would be generated for the following URLs:\n\n\n/\n/about/\n/license/\n\n\n\n\nYou can also include your Markdown files in nested directories if that better\nsuits your documentation layout.\n\n\ndocs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md\n\n\n\n\nSource files inside nested directories will cause pages to be generated with\nnested URLs, like so:\n\n\n/\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/\n\n\n\n\nLinking documents\n\uf0c1\n\n\nMkDocs allows you to interlink your documentation by using regular Markdown\nhyperlinks.\n\n\nInternal hyperlinks\n\uf0c1\n\n\nWhen linking between pages in the documentation you can simply use the regular\nMarkdown hyperlinking syntax, including the relative path to the Markdown\ndocument you wish to link to.\n\n\nPlease see the [project license](license.md) for further details.\n\n\n\nWhen the MkDocs build runs, these hyperlinks will automatically be transformed\ninto a hyperlink to the appropriate HTML page.\n\n\nWhen working on your documentation you should be able to open the linked\nMarkdown document in a new editor window simply by clicking on the link.\n\n\nIf the target documentation file is in another directory you'll need to make\nsure to include any relative directory path in the hyperlink.\n\n\nPlease see the [project license](../about/license.md) for further details.\n\n\n\nYou can also link to a section within a target documentation page by using an\nanchor link. The generated HTML will correctly transform the path portion of the\nhyperlink, and leave the anchor portion intact.\n\n\nPlease see the [project license](about.md#license) for further details.\n\n\n\nImages and media\n\uf0c1\n\n\nAs well as the Markdown source files, you can also include other file types in\nyour documentation, which will be copied across when generating your\ndocumentation site. These might include images and other media.\n\n\nFor example, if your project documentation needed to include a \nGitHub pages\nCNAME\nfile\n\nand a PNG formatted screenshot image then your file layout might look as\nfollows:\n\n\nmkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png\n\n\n\n\nTo include images in your documentation source files, simply use any of the\nregular Markdown image syntaxes:\n\n\nCupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*\n\n\n\n\nYou image will now be embedded when you build the documentation, and should also\nbe previewed if you're working on the documentation with a Markdown editor.\n\n\nMarkdown extensions\n\uf0c1\n\n\nMkDocs supports the following Markdown extensions.\n\n\nTables\n\uf0c1\n\n\nA simple table looks like this:\n\n\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n\n\n\n\nIf you wish, you can add a leading and tailing pipe to each line of the table:\n\n\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n\n\n\n\nSpecify alignment for each column by adding colons to separator lines:\n\n\nFirst Header | Second Header | Third Header\n:----------- |:-------------:| -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n\n\n\n\nFenced code blocks\n\uf0c1\n\n\nThe first line should contain 3 or more backtick (\n`\n) characters, and the\nlast line should contain the same number of backtick characters (\n`\n):\n\n\n```\nFenced code blocks are like Stardard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.\n```\n\n\n\n\nWith this approach, the language can optionally be specified on the first line\nafter the backticks:\n\n\n```python\ndef fn():\n    pass\n```",
            "title": "Writing Your Docs"
        },
        {
            "location": "/user-guide/writing-your-docs/#writing-your-docs",
            "text": "How to write and layout your markdown source files.",
            "title": "Writing your docs"
        },
        {
            "location": "/user-guide/writing-your-docs/#configure-pages-and-navigation",
            "text": "The  pages configuration  in your mkdocs.yml  defines which pages are built by MkDocs and how they appear in the\ndocumentation navigation. If not provided, the pages configuration will be\nautomatically created by discovering all the Markdown files in the documentation directory .  A simple pages configuration looks like this:  pages:\n- 'index.md'\n- 'about.md'  With this example we will build two pages at the top level and they will\nautomatically have their titles inferred from the filename. Assuming  docs_dir \nhas the default value,  docs , the source files for this documentation would be docs/index.md  and  docs/about.md . To provide a custom name for these pages,\nthey can be added before the filename.  pages:\n- Home: 'index.md'\n- About: 'about.md'",
            "title": "Configure Pages and Navigation"
        },
        {
            "location": "/user-guide/writing-your-docs/#multilevel-documentation",
            "text": "Subsections can be created by listing related pages together under a section\ntitle. For example:  pages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'  With the above configuration we have three top level sections: Home, User Guide\nand About. Then under User Guide we have two pages, Writing your docs and\nStyling your docs. Under the About section we also have two pages, License and\nRelease Notes.",
            "title": "Multilevel documentation"
        },
        {
            "location": "/user-guide/writing-your-docs/#file-layout",
            "text": "Your documentation source should be written as regular Markdown files, and\nplaced in a directory somewhere in your project. Normally this directory will be\nnamed  docs  and will exist at the top level of your project, alongside the mkdocs.yml  configuration file.  The simplest project you can create will look something like this:  mkdocs.yml\ndocs/\n    index.md  By convention your project homepage should always be named  index . Any of the\nfollowing extensions may be used for your Markdown source files:  markdown , mdown ,  mkdn ,  mkd ,  md .  You can also create multi-page documentation, by creating several markdown\nfiles:  mkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md  The file layout you use determines the URLs that are used for the generated\npages. Given the above layout, pages would be generated for the following URLs:  /\n/about/\n/license/  You can also include your Markdown files in nested directories if that better\nsuits your documentation layout.  docs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md  Source files inside nested directories will cause pages to be generated with\nnested URLs, like so:  /\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/",
            "title": "File layout"
        },
        {
            "location": "/user-guide/writing-your-docs/#linking-documents",
            "text": "MkDocs allows you to interlink your documentation by using regular Markdown\nhyperlinks.",
            "title": "Linking documents"
        },
        {
            "location": "/user-guide/writing-your-docs/#internal-hyperlinks",
            "text": "When linking between pages in the documentation you can simply use the regular\nMarkdown hyperlinking syntax, including the relative path to the Markdown\ndocument you wish to link to.  Please see the [project license](license.md) for further details.  When the MkDocs build runs, these hyperlinks will automatically be transformed\ninto a hyperlink to the appropriate HTML page.  When working on your documentation you should be able to open the linked\nMarkdown document in a new editor window simply by clicking on the link.  If the target documentation file is in another directory you'll need to make\nsure to include any relative directory path in the hyperlink.  Please see the [project license](../about/license.md) for further details.  You can also link to a section within a target documentation page by using an\nanchor link. The generated HTML will correctly transform the path portion of the\nhyperlink, and leave the anchor portion intact.  Please see the [project license](about.md#license) for further details.",
            "title": "Internal hyperlinks"
        },
        {
            "location": "/user-guide/writing-your-docs/#images-and-media",
            "text": "As well as the Markdown source files, you can also include other file types in\nyour documentation, which will be copied across when generating your\ndocumentation site. These might include images and other media.  For example, if your project documentation needed to include a  GitHub pages\nCNAME\nfile \nand a PNG formatted screenshot image then your file layout might look as\nfollows:  mkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png  To include images in your documentation source files, simply use any of the\nregular Markdown image syntaxes:  Cupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*  You image will now be embedded when you build the documentation, and should also\nbe previewed if you're working on the documentation with a Markdown editor.",
            "title": "Images and media"
        },
        {
            "location": "/user-guide/writing-your-docs/#markdown-extensions",
            "text": "MkDocs supports the following Markdown extensions.",
            "title": "Markdown extensions"
        },
        {
            "location": "/user-guide/writing-your-docs/#tables",
            "text": "A simple table looks like this:  First Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell  If you wish, you can add a leading and tailing pipe to each line of the table:  | First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |  Specify alignment for each column by adding colons to separator lines:  First Header | Second Header | Third Header\n:----------- |:-------------:| -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right",
            "title": "Tables"
        },
        {
            "location": "/user-guide/writing-your-docs/#fenced-code-blocks",
            "text": "The first line should contain 3 or more backtick ( ` ) characters, and the\nlast line should contain the same number of backtick characters ( ` ):  ```\nFenced code blocks are like Stardard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.\n```  With this approach, the language can optionally be specified on the first line\nafter the backticks:  ```python\ndef fn():\n    pass\n```",
            "title": "Fenced code blocks"
        },
        {
            "location": "/user-guide/styling-your-docs/",
            "text": "Styling your docs\n\uf0c1\n\n\nHow to style and theme your documentation.\n\n\n\n\nMkDocs includes a number of different \nbuilt-in themes\n and\n\nexternal themes\n which can easily be\n\ncustomised with extra CSS or JavaScript\n or you can\ncreate a \ncustom theme\n for your documentation.\n\n\nTo use a theme that is included in MkDocs, simply add this to your\n\nmkdocs.yml\n config file.\n\n\ntheme: readthedocs\n\n\n\nReplace \nreadthedocs\n with any of the \nbuilt-in themes\n listed below.\n\n\nTo create a new custom theme or more heavily customise an existing theme, see\nthe \ncustom themes\n section below.\n\n\nBuilt-in themes\n\uf0c1\n\n\nmkdocs\n\uf0c1\n\n\n\n\nreadthedocs\n\uf0c1\n\n\n\n\nThird Party Themes\n\uf0c1\n\n\nThird party themes can be found in the MkDocs \ncommunity wiki\n.\n\n\nCustomising a Theme\n\uf0c1\n\n\nThe \nextra_css\n and \nextra_javascript\n configuration options can be used to\nmake tweaks and customisations to existing themes. To use these, you simply\nneed to include either CSS or JavaScript files within your \ndocumentation\ndirectory\n.\n\n\nFor example, to change the colour of the headers in your documentation, create\na file called \nextra.css\n and place it next to the documentation Markdown. In\nthat file add the following CSS.\n\n\nh1 {\n  color: red;\n}\n\n\n\n\n\n\nNote\n\n\nIf you are deploying your documentation with \nReadTheDocs\n. You will need\nto explicitly list the CSS and JavaScript files you want to include in\nyour config. To do this, add the following to your mkdocs.yml.\n\n\nextra_css: [extra.css]\n\n\n\n\n\nAfter making these changes, they should be visible when you run\n\nmkdocs serve\n - if you already had this running, you should see that the CSS\nchanges were automatically picked up and the documentation will be updated.",
            "title": "Styling Your Docs"
        },
        {
            "location": "/user-guide/styling-your-docs/#styling-your-docs",
            "text": "How to style and theme your documentation.   MkDocs includes a number of different  built-in themes  and external themes  which can easily be customised with extra CSS or JavaScript  or you can\ncreate a  custom theme  for your documentation.  To use a theme that is included in MkDocs, simply add this to your mkdocs.yml  config file.  theme: readthedocs  Replace  readthedocs  with any of the  built-in themes  listed below.  To create a new custom theme or more heavily customise an existing theme, see\nthe  custom themes  section below.",
            "title": "Styling your docs"
        },
        {
            "location": "/user-guide/styling-your-docs/#built-in-themes",
            "text": "",
            "title": "Built-in themes"
        },
        {
            "location": "/user-guide/styling-your-docs/#mkdocs",
            "text": "",
            "title": "mkdocs"
        },
        {
            "location": "/user-guide/styling-your-docs/#readthedocs",
            "text": "",
            "title": "readthedocs"
        },
        {
            "location": "/user-guide/styling-your-docs/#third-party-themes",
            "text": "Third party themes can be found in the MkDocs  community wiki .",
            "title": "Third Party Themes"
        },
        {
            "location": "/user-guide/styling-your-docs/#customising-a-theme",
            "text": "The  extra_css  and  extra_javascript  configuration options can be used to\nmake tweaks and customisations to existing themes. To use these, you simply\nneed to include either CSS or JavaScript files within your  documentation\ndirectory .  For example, to change the colour of the headers in your documentation, create\na file called  extra.css  and place it next to the documentation Markdown. In\nthat file add the following CSS.  h1 {\n  color: red;\n}   Note  If you are deploying your documentation with  ReadTheDocs . You will need\nto explicitly list the CSS and JavaScript files you want to include in\nyour config. To do this, add the following to your mkdocs.yml.  extra_css: [extra.css]   After making these changes, they should be visible when you run mkdocs serve  - if you already had this running, you should see that the CSS\nchanges were automatically picked up and the documentation will be updated.",
            "title": "Customising a Theme"
        },
        {
            "location": "/user-guide/configuration/",
            "text": "Configuration\n\uf0c1\n\n\nGuide to all available configuration settings.\n\n\n\n\nIntroduction\n\uf0c1\n\n\nProject settings are always configured by using a YAML configuration file in the\nproject directory named \nmkdocs.yml\n.\n\n\nAs a minimum this configuration file must contain the \nsite_name\n setting. All\nother settings are optional.\n\n\nProject information\n\uf0c1\n\n\nsite_name\n\uf0c1\n\n\nThis is a \nrequired setting\n, and should be a string that is used as the main\ntitle for the project documentation. For example:\n\n\nsite_name: Marshmallow Generator\n\n\n\n\nWhen rendering the theme this setting will be passed as the \nsite_name\n context\nvariable.\n\n\nsite_url\n\uf0c1\n\n\nSet the canonical URL of the site. This will add a link tag with the canonical\nURL to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nrepo_url\n\uf0c1\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\nrepo_url: https://github.com/example/repository/\n\n\n\n\ndefault\n: \nnull\n\n\nrepo_name\n\uf0c1\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\ndefault\n: \n'GitHub'\n or \n'Bitbucket'\n if the \nrepo_url\n matches those\ndomains, otherwise \nnull\n\n\nsite_description\n\uf0c1\n\n\nSet the site description. This will add a meta tag to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nsite_author\n\uf0c1\n\n\nSet the name of the author. This will add a meta tag to the generated HTML\nheader.\n\n\ndefault\n: \nnull\n\n\nsite_favicon\n\uf0c1\n\n\nSet the favicon to use. Putting a \nfavicon.ico\n into the \ndocs/\n directory, the\nconfig would look as follows:\n\n\nsite_favicon: favicon.ico\n\n\n\n\ndefault\n: \nnull\n\n\ncopyright\n\uf0c1\n\n\nSet the copyright information to be included in the documentation by the theme.\n\n\ndefault\n: \nnull\n\n\ngoogle_analytics\n\uf0c1\n\n\nSet the Google analytics tracking configuration.\n\n\ngoogle_analytics: ['UA-36723568-3', 'mkdocs.org']\n\n\n\n\ndefault\n: \nnull\n\n\nremote_branch\n\uf0c1\n\n\nSet the remote branch to commit to when using \ngh-deploy\n to deploy to Github\nPages. This option can be overridden by a command line option in \ngh-deploy\n.\n\n\ndefault\n: \ngh-pages\n\n\nremote_name\n\uf0c1\n\n\nSet the remote name to push to when using \ngh-deploy\n to deploy to Github Pages.\nThis option can be overridden by a command line option in \ngh-deploy\n.\n\n\ndefault\n: \ngh-pages\n\n\nDocumentation layout\n\uf0c1\n\n\npages\n\uf0c1\n\n\nThis setting is used to determine the set of pages that should be built for the\ndocumentation. For example, the following would create Introduction, User Guide\nand About pages, given the three source files \nindex.md\n, \nuser-guide.md\n and\n\nabout.md\n, respectively.\n\n\npages:\n    - 'Introduction': 'index.md'\n    - 'User Guide': 'user-guide.md'\n    - 'About': 'about.md'\n\n\n\n\nSee the section on \nconfiguring pages and\nnavigation\n for\na more detailed breakdown, including how to create sub-sections.\n\n\nBuild directories\n\uf0c1\n\n\ntheme\n\uf0c1\n\n\nSets the theme of your documentation site, for a list of available themes visit\n\nstyling your docs\n.\n\n\ndefault\n: \n'mkdocs'\n\n\ntheme_dir\n\uf0c1\n\n\nLets you set a directory to a custom theme. This can either be a relative\ndirectory, in which case it is resolved relative to the directory containing\nyour configuration file, or it can be an absolute directory path.\n\n\nSee \nstyling your docs\n for an explanation\nof custom themes.\n\n\ndefault\n: \nnull\n\n\ndocs_dir\n\uf0c1\n\n\nLets you set the directory containing the documentation source markdown files.\nThis can either be a relative directory, in which case it is resolved relative\nto the directory containing you configuration file, or it can be an absolute\ndirectory path.\n\n\ndefault\n: \n'docs'\n\n\nsite_dir\n\uf0c1\n\n\nLets you set the directory where the output HTML and other files are created.\nThis can either be a relative directory, in which case it is resolved relative\nto the directory containing you configuration file, or it can be an absolute\ndirectory path.\n\n\ndefault\n: \n'site'\n\n\n\n\nNote:\n\n\nIf you are using source code control you will normally want to ensure that\nyour \nbuild output\n files are not committed into the repository, and only\nkeep the \nsource\n files under version control. For example, if using \ngit\n\nyou might add the following line to your \n.gitignore\n file:\n\n\nsite/\n\n\n\nIf you're using another source code control tool, you'll want to check its\ndocumentation on how to ignore specific directories.\n\n\n\n\nextra_css\n\uf0c1\n\n\nSet a list of CSS files to be included by the theme. For example, the\nfollowing example will include the the extra.css file within the css\nsubdirectory in your \ndocs_dir\n.\n\n\nextra_css:\n    - css/extra.css\n    - css/second_extra.css\n\n\n\n\ndefault\n: By default \nextra_css\n will contain a list of all the CSS files\nfound within the \ndocs_dir\n, if none are found it will be \n[]\n (an empty list).\n\n\nextra_javascript\n\uf0c1\n\n\nSet a list of JavaScript files to be included by the theme. See the example\nin \nextra_css\n for usage.\n\n\ndefault\n: By default \nextra_javascript\n will contain a list of all the\nJavaScript files found within the \ndocs_dir\n, if none are found it will be \n[]\n\n(an empty list).\n\n\nextra_templates\n\uf0c1\n\n\nSet a list of templates to be built by MkDocs. To see more about writing\ntemplates for MkDocs read the documentation about \ncustom themes\n and\nspecifically the section about the \nvariables that are available\n to templates.\nSee the example in \nextra_css\n for usage.\n\n\ndefault\n: Unlike extra_css and extra_javascript, by default \nextra_templates\n\nwill be \n[]\n (an empty list).\n\n\nextra\n\uf0c1\n\n\nA set of key value pairs, where the values can be any valid YAML construct, that\nwill be passed to the template. This allows for great flexibility when creating\ncustom themes.\n\n\nFor example, if you are using a theme that supports displaying the project\nversion, you can pass it to the theme like this:\n\n\nextra:\n    version: 1.0\n\n\n\n\ndefault\n: By default \nextra\n will be an empty key value mapping.\n\n\nPreview controls\n\uf0c1\n\n\nuse_directory_urls\n\uf0c1\n\n\nThis setting controls the style used for linking to pages within the\ndocumentation.\n\n\nThe following table demonstrates how the URLs used on the site differ when\nsetting \nuse_directory_urls\n to \ntrue\n or \nfalse\n.\n\n\n\n\n\n\n\n\nSource file\n\n\nGenerated HTML\n\n\nuse_directory_urls=true\n\n\nuse_directory_urls=false\n\n\n\n\n\n\n\n\n\n\nindex.md\n\n\nindex.html\n\n\n/\n\n\n/index.html\n\n\n\n\n\n\napi-guide.md\n\n\napi-guide/index.html\n\n\n/api-guide/\n\n\n/api-guide/index.html\n\n\n\n\n\n\nabout.md\n\n\nabout/index.html\n\n\n/about/\n\n\n/about/index.html\n\n\n\n\n\n\n\n\nThe default style of \nuse_directory_urls=true\n creates more user friendly URLs,\nand is usually what you'll want to use.\n\n\nThe alternate style can occasionally be useful if you want your documentation to\nremain properly linked when opening pages directly from the file system, because\nit create links that point directly to the target \nfile\n rather than the target\n\ndirectory\n.\n\n\ndefault\n: \ntrue\n\n\nstrict\n\uf0c1\n\n\nDetermines if a broken link to a page within the documentation is considered a\nwarning or an error (link to a page not listed in the pages setting). Set to\ntrue to halt processing when a broken link is found, false prints a warning.\n\n\ndefault\n: \nfalse\n\n\ndev_addr\n\uf0c1\n\n\nDetermines the address used when running \nmkdocs serve\n. Setting this allows you\nto use another port, or allows you to make the service accessible over your\nlocal network by using the \n0.0.0.0\n address.\n\n\nAs with all settings, you can set this from the command line, which can be\nuseful, for example:\n\n\nmkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, on the local network.\n\n\n\n\ndefault\n: \n'127.0.0.1:8000'\n\n\nFormatting options\n\uf0c1\n\n\nmarkdown_extensions\n\uf0c1\n\n\nMkDocs uses the \nPython Markdown\n library to translate Markdown files\ninto HTML. Python Markdown supports a variety of \nextensions\n\nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default (\nmeta\n, \ntoc\n, \ntables\n,\nand \nfenced_code\n).\n\n\nFor example, to enable the \nSmartyPants typography extension\n, use:\n\n\nmarkdown_extensions:\n    - smarty\n\n\n\n\nSome extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n(\noption_name: option value\n) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.\n\n\nFor example, to enable permalinks in the (included) \ntoc\n extension, use:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n\n\n\n\nNote that a colon (\n:\n) must follow the extension name (\ntoc\n) and then on a new\nline the option name and value must be indented and seperated by a colon. If you\nwould like to define multipe options for a single extension, each option must be\ndefined on a seperate line:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"\n\n\n\n\nAdd an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:\n\n\nmarkdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists\n\n\n\n\n\n\nSee Also:\n\n\nThe Python-Markdown documentation provides a \nlist of extensions\n\nwhich are available out-of-the-box. For a list of configuration options\navailable for a given extension, see the documentation for that extension.\n\n\nYou may also install and use various \nthird party extensions\n. Consult\nthe documentation provided by those extensions for installation instructions\nand available configuration options.\n\n\n\n\ndefault\n: \n[]",
            "title": "Configuration"
        },
        {
            "location": "/user-guide/configuration/#configuration",
            "text": "Guide to all available configuration settings.",
            "title": "Configuration"
        },
        {
            "location": "/user-guide/configuration/#introduction",
            "text": "Project settings are always configured by using a YAML configuration file in the\nproject directory named  mkdocs.yml .  As a minimum this configuration file must contain the  site_name  setting. All\nother settings are optional.",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/configuration/#project-information",
            "text": "",
            "title": "Project information"
        },
        {
            "location": "/user-guide/configuration/#site_name",
            "text": "This is a  required setting , and should be a string that is used as the main\ntitle for the project documentation. For example:  site_name: Marshmallow Generator  When rendering the theme this setting will be passed as the  site_name  context\nvariable.",
            "title": "site_name"
        },
        {
            "location": "/user-guide/configuration/#site_url",
            "text": "Set the canonical URL of the site. This will add a link tag with the canonical\nURL to the generated HTML header.  default :  null",
            "title": "site_url"
        },
        {
            "location": "/user-guide/configuration/#repo_url",
            "text": "When set, provides a link to your GitHub or Bitbucket repository on each page.  repo_url: https://github.com/example/repository/  default :  null",
            "title": "repo_url"
        },
        {
            "location": "/user-guide/configuration/#repo_name",
            "text": "When set, provides a link to your GitHub or Bitbucket repository on each page.  default :  'GitHub'  or  'Bitbucket'  if the  repo_url  matches those\ndomains, otherwise  null",
            "title": "repo_name"
        },
        {
            "location": "/user-guide/configuration/#site_description",
            "text": "Set the site description. This will add a meta tag to the generated HTML header.  default :  null",
            "title": "site_description"
        },
        {
            "location": "/user-guide/configuration/#site_author",
            "text": "Set the name of the author. This will add a meta tag to the generated HTML\nheader.  default :  null",
            "title": "site_author"
        },
        {
            "location": "/user-guide/configuration/#site_favicon",
            "text": "Set the favicon to use. Putting a  favicon.ico  into the  docs/  directory, the\nconfig would look as follows:  site_favicon: favicon.ico  default :  null",
            "title": "site_favicon"
        },
        {
            "location": "/user-guide/configuration/#copyright",
            "text": "Set the copyright information to be included in the documentation by the theme.  default :  null",
            "title": "copyright"
        },
        {
            "location": "/user-guide/configuration/#google_analytics",
            "text": "Set the Google analytics tracking configuration.  google_analytics: ['UA-36723568-3', 'mkdocs.org']  default :  null",
            "title": "google_analytics"
        },
        {
            "location": "/user-guide/configuration/#remote_branch",
            "text": "Set the remote branch to commit to when using  gh-deploy  to deploy to Github\nPages. This option can be overridden by a command line option in  gh-deploy .  default :  gh-pages",
            "title": "remote_branch"
        },
        {
            "location": "/user-guide/configuration/#remote_name",
            "text": "Set the remote name to push to when using  gh-deploy  to deploy to Github Pages.\nThis option can be overridden by a command line option in  gh-deploy .  default :  gh-pages",
            "title": "remote_name"
        },
        {
            "location": "/user-guide/configuration/#documentation-layout",
            "text": "",
            "title": "Documentation layout"
        },
        {
            "location": "/user-guide/configuration/#pages",
            "text": "This setting is used to determine the set of pages that should be built for the\ndocumentation. For example, the following would create Introduction, User Guide\nand About pages, given the three source files  index.md ,  user-guide.md  and about.md , respectively.  pages:\n    - 'Introduction': 'index.md'\n    - 'User Guide': 'user-guide.md'\n    - 'About': 'about.md'  See the section on  configuring pages and\nnavigation  for\na more detailed breakdown, including how to create sub-sections.",
            "title": "pages"
        },
        {
            "location": "/user-guide/configuration/#build-directories",
            "text": "",
            "title": "Build directories"
        },
        {
            "location": "/user-guide/configuration/#theme",
            "text": "Sets the theme of your documentation site, for a list of available themes visit styling your docs .  default :  'mkdocs'",
            "title": "theme"
        },
        {
            "location": "/user-guide/configuration/#theme_dir",
            "text": "Lets you set a directory to a custom theme. This can either be a relative\ndirectory, in which case it is resolved relative to the directory containing\nyour configuration file, or it can be an absolute directory path.  See  styling your docs  for an explanation\nof custom themes.  default :  null",
            "title": "theme_dir"
        },
        {
            "location": "/user-guide/configuration/#docs_dir",
            "text": "Lets you set the directory containing the documentation source markdown files.\nThis can either be a relative directory, in which case it is resolved relative\nto the directory containing you configuration file, or it can be an absolute\ndirectory path.  default :  'docs'",
            "title": "docs_dir"
        },
        {
            "location": "/user-guide/configuration/#site_dir",
            "text": "Lets you set the directory where the output HTML and other files are created.\nThis can either be a relative directory, in which case it is resolved relative\nto the directory containing you configuration file, or it can be an absolute\ndirectory path.  default :  'site'   Note:  If you are using source code control you will normally want to ensure that\nyour  build output  files are not committed into the repository, and only\nkeep the  source  files under version control. For example, if using  git \nyou might add the following line to your  .gitignore  file:  site/  If you're using another source code control tool, you'll want to check its\ndocumentation on how to ignore specific directories.",
            "title": "site_dir"
        },
        {
            "location": "/user-guide/configuration/#extra_css",
            "text": "Set a list of CSS files to be included by the theme. For example, the\nfollowing example will include the the extra.css file within the css\nsubdirectory in your  docs_dir .  extra_css:\n    - css/extra.css\n    - css/second_extra.css  default : By default  extra_css  will contain a list of all the CSS files\nfound within the  docs_dir , if none are found it will be  []  (an empty list).",
            "title": "extra_css"
        },
        {
            "location": "/user-guide/configuration/#extra_javascript",
            "text": "Set a list of JavaScript files to be included by the theme. See the example\nin  extra_css  for usage.  default : By default  extra_javascript  will contain a list of all the\nJavaScript files found within the  docs_dir , if none are found it will be  [] \n(an empty list).",
            "title": "extra_javascript"
        },
        {
            "location": "/user-guide/configuration/#extra_templates",
            "text": "Set a list of templates to be built by MkDocs. To see more about writing\ntemplates for MkDocs read the documentation about  custom themes  and\nspecifically the section about the  variables that are available  to templates.\nSee the example in  extra_css  for usage.  default : Unlike extra_css and extra_javascript, by default  extra_templates \nwill be  []  (an empty list).",
            "title": "extra_templates"
        },
        {
            "location": "/user-guide/configuration/#extra",
            "text": "A set of key value pairs, where the values can be any valid YAML construct, that\nwill be passed to the template. This allows for great flexibility when creating\ncustom themes.  For example, if you are using a theme that supports displaying the project\nversion, you can pass it to the theme like this:  extra:\n    version: 1.0  default : By default  extra  will be an empty key value mapping.",
            "title": "extra"
        },
        {
            "location": "/user-guide/configuration/#preview-controls",
            "text": "",
            "title": "Preview controls"
        },
        {
            "location": "/user-guide/configuration/#use_directory_urls",
            "text": "This setting controls the style used for linking to pages within the\ndocumentation.  The following table demonstrates how the URLs used on the site differ when\nsetting  use_directory_urls  to  true  or  false .     Source file  Generated HTML  use_directory_urls=true  use_directory_urls=false      index.md  index.html  /  /index.html    api-guide.md  api-guide/index.html  /api-guide/  /api-guide/index.html    about.md  about/index.html  /about/  /about/index.html     The default style of  use_directory_urls=true  creates more user friendly URLs,\nand is usually what you'll want to use.  The alternate style can occasionally be useful if you want your documentation to\nremain properly linked when opening pages directly from the file system, because\nit create links that point directly to the target  file  rather than the target directory .  default :  true",
            "title": "use_directory_urls"
        },
        {
            "location": "/user-guide/configuration/#strict",
            "text": "Determines if a broken link to a page within the documentation is considered a\nwarning or an error (link to a page not listed in the pages setting). Set to\ntrue to halt processing when a broken link is found, false prints a warning.  default :  false",
            "title": "strict"
        },
        {
            "location": "/user-guide/configuration/#dev_addr",
            "text": "Determines the address used when running  mkdocs serve . Setting this allows you\nto use another port, or allows you to make the service accessible over your\nlocal network by using the  0.0.0.0  address.  As with all settings, you can set this from the command line, which can be\nuseful, for example:  mkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, on the local network.  default :  '127.0.0.1:8000'",
            "title": "dev_addr"
        },
        {
            "location": "/user-guide/configuration/#formatting-options",
            "text": "",
            "title": "Formatting options"
        },
        {
            "location": "/user-guide/configuration/#markdown_extensions",
            "text": "MkDocs uses the  Python Markdown  library to translate Markdown files\ninto HTML. Python Markdown supports a variety of  extensions \nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default ( meta ,  toc ,  tables ,\nand  fenced_code ).  For example, to enable the  SmartyPants typography extension , use:  markdown_extensions:\n    - smarty  Some extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n( option_name: option value ) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.  For example, to enable permalinks in the (included)  toc  extension, use:  markdown_extensions:\n    - toc:\n        permalink: True  Note that a colon ( : ) must follow the extension name ( toc ) and then on a new\nline the option name and value must be indented and seperated by a colon. If you\nwould like to define multipe options for a single extension, each option must be\ndefined on a seperate line:  markdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"  Add an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:  markdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists   See Also:  The Python-Markdown documentation provides a  list of extensions \nwhich are available out-of-the-box. For a list of configuration options\navailable for a given extension, see the documentation for that extension.  You may also install and use various  third party extensions . Consult\nthe documentation provided by those extensions for installation instructions\nand available configuration options.   default :  []",
            "title": "markdown_extensions"
        },
        {
            "location": "/user-guide/deploying-your-docs/",
            "text": "Deploying your docs\n\uf0c1\n\n\nA basic guide to deploying your docs to various hosting providers\n\n\n\n\nGitHub Pages\n\uf0c1\n\n\nIf you host the source code for a project on \nGitHub\n, you can easily use\n\nGitHub Pages\n to host the documentation for your project. After you \ncheckout\n\nthe primary working branch (usually \nmaster\n) of the git repository where you\nmaintain the source documentation for your project, run the following command:\n\n\nmkdocs gh-deploy --clean\n\n\n\n\nThat's it! Behind the scenes, MkDocs will build your docs and use the \nghp-import\n\ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.\n\n\nUse \nmkdocs gh-deploy --help\n to get a full list of options available for the\n\ngh-deploy\n command.\n\n\nBe aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the \nbuild\n or \nserve\n commands and reviewing the built\nfiles locally.\n\n\n\n\nWarning\n\n\nYou should never edit files in your gh-pages branch by hand if you're using\nthe \ngh-deploy\n command because you will lose your work.\n\n\n\n\nRead the Docs\n\uf0c1\n\n\nRead the Docs\n offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the\n\ninstructions\n on their site to arrange the files in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.\n\n\n\n\nNote\n\n\nTo benefit from all of the \nfeatures\n offered by Read the Docs, you will need\nto use the \nRead the Docs theme\n which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.\n\n\n\n\nPyPI\n\uf0c1\n\n\nIf you maintain a \nPython\n project which is hosted on the \nPython Package\nIndex\n (PyPI), you can use the hosting provided at \npythonhosted.org\n to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:\n\n\nmkdocs build --clean\npython setup.py upload_docs --upload-dir=site\n\n\n\n\nYou documentation will be hosted at \nhttp://pythonhosted.org/<projectname>/\n\nwhere \n<projectname>\n is the name you used to register your project with PyPI.\n\n\nThere are a few prerequisites for the above to work:\n\n\n\n\nYou must be using \nSetuptools\n in your \nsetup.py\n script (\nDistutils\n does\n   not offer an \nupload_docs\n command).\n\n\nYour project must already be registered with PyPI (use \npython setup.py\n   register\n).\n\n\nYour \nmkdocs.yml\n config file and your \"docs\" directory (value assigned to\n   the \ndocs_dir\n configuration option) are presumed to be in the root directory\n   of your project alongside your \nsetup.py\n script.\n\n\nIt is assumed that the default value (\n\"site\"\n) is assigned to the \nsite_dir\n\n   configuration option in your \nmkdocs.yaml\n config file. If you have set a\n   different value, assign that value to the \n--upload-dir\n option.\n\n\n\n\nOther Providers\n\uf0c1\n\n\nAny hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While it would be impossible to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.\n\n\nWhen you build your site (using the \nmkdocs build\n command), all of the files\nare written to the directory assigned to the \nsite_dir\n configuration option\n(defaults to \n\"site\"\n) in your \nmkdocs.yaml\n config file. Generally, you will\nsimply need to copy the contents of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line \nftp\n, \nssh\n or \nscp\n client to transfer\nthe files.\n\n\nFor example, a typical set of commands from the command line might look\nsomething like this:\n\n\nmkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root\n\n\n\n\nOf course, you will need to replace \nuser\n with the username you have with your\nhosting provider and \nhost\n with the appropriate domain name. Additionally, you\nwill need to adjust the \n/path/to/server/root\n to match the configuration of\nyour hosts' file system.\n\n\nSee your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".",
            "title": "Deploying Your Docs"
        },
        {
            "location": "/user-guide/deploying-your-docs/#deploying-your-docs",
            "text": "A basic guide to deploying your docs to various hosting providers",
            "title": "Deploying your docs"
        },
        {
            "location": "/user-guide/deploying-your-docs/#github-pages",
            "text": "If you host the source code for a project on  GitHub , you can easily use GitHub Pages  to host the documentation for your project. After you  checkout \nthe primary working branch (usually  master ) of the git repository where you\nmaintain the source documentation for your project, run the following command:  mkdocs gh-deploy --clean  That's it! Behind the scenes, MkDocs will build your docs and use the  ghp-import \ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.  Use  mkdocs gh-deploy --help  to get a full list of options available for the gh-deploy  command.  Be aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the  build  or  serve  commands and reviewing the built\nfiles locally.   Warning  You should never edit files in your gh-pages branch by hand if you're using\nthe  gh-deploy  command because you will lose your work.",
            "title": "GitHub Pages"
        },
        {
            "location": "/user-guide/deploying-your-docs/#read-the-docs",
            "text": "Read the Docs  offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions  on their site to arrange the files in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.   Note  To benefit from all of the  features  offered by Read the Docs, you will need\nto use the  Read the Docs theme  which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.",
            "title": "Read the Docs"
        },
        {
            "location": "/user-guide/deploying-your-docs/#pypi",
            "text": "If you maintain a  Python  project which is hosted on the  Python Package\nIndex  (PyPI), you can use the hosting provided at  pythonhosted.org  to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:  mkdocs build --clean\npython setup.py upload_docs --upload-dir=site  You documentation will be hosted at  http://pythonhosted.org/<projectname>/ \nwhere  <projectname>  is the name you used to register your project with PyPI.  There are a few prerequisites for the above to work:   You must be using  Setuptools  in your  setup.py  script ( Distutils  does\n   not offer an  upload_docs  command).  Your project must already be registered with PyPI (use  python setup.py\n   register ).  Your  mkdocs.yml  config file and your \"docs\" directory (value assigned to\n   the  docs_dir  configuration option) are presumed to be in the root directory\n   of your project alongside your  setup.py  script.  It is assumed that the default value ( \"site\" ) is assigned to the  site_dir \n   configuration option in your  mkdocs.yaml  config file. If you have set a\n   different value, assign that value to the  --upload-dir  option.",
            "title": "PyPI"
        },
        {
            "location": "/user-guide/deploying-your-docs/#other-providers",
            "text": "Any hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While it would be impossible to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.  When you build your site (using the  mkdocs build  command), all of the files\nare written to the directory assigned to the  site_dir  configuration option\n(defaults to  \"site\" ) in your  mkdocs.yaml  config file. Generally, you will\nsimply need to copy the contents of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line  ftp ,  ssh  or  scp  client to transfer\nthe files.  For example, a typical set of commands from the command line might look\nsomething like this:  mkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root  Of course, you will need to replace  user  with the username you have with your\nhosting provider and  host  with the appropriate domain name. Additionally, you\nwill need to adjust the  /path/to/server/root  to match the configuration of\nyour hosts' file system.  See your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".",
            "title": "Other Providers"
        },
        {
            "location": "/user-guide/custom-themes/",
            "text": "Custom themes\n\uf0c1\n\n\nA guide to creating and distributing custom themes.\n\n\n\n\n\n\nNote\n\n\nIf you are looking for third party themes, they are listed in the MkDocs\n\ncommunity wiki\n. If\nyou want to share a theme you create, you should list it on the Wiki.\n\n\n\n\nWhen creating a new theme, you can either follow the steps in this guide to\ncreate one from scratch or you can download the \nmkdocs-basic-theme\n as a\nbasic, yet complete, theme with all the boilerplate required. \nYou can find\nthis base theme on \nGitHub\n.\nIt contains detailed comments in the code to describe the different features\nand their usage.\n\n\nCreating a custom theme\n\uf0c1\n\n\nThe bare minimum required for a custom theme is a \nbase.html\n \nJinja2\ntemplate\n file. This should be placed in a directory which will be the\n\ntheme_dir\n and it should be created next to the \nmkdocs.yml\n configuration\nfile. Within \nmkdocs.yml\n, specify the \ntheme_dir\n option and set it to the\nname of the directory containing \nbase.html\n. For example, given this example\nproject layout:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n\n\n\nYou would include the following setting to use the custom theme directory:\n\n\ntheme_dir: 'custom_theme'\n\n\n\nIf used in combination with the \ntheme\n configuration value a custom theme can\nbe used to replace only specific parts of a built-in theme. For example, with\nthe above layout and if you set \ntheme: mkdocs\n then the \nbase.html\n file\nwould replace that in the theme but otherwise it would remain the same. This\nis useful if you want to make small adjustments to an existing theme.\n\n\nBasic theme\n\uf0c1\n\n\nThe simplest \nbase.html\n file is the following:\n\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n\n\n\n\nArticle content from each page specified in \nmkdocs.yml\n is inserted using the\n\n{{ content }}\n tag. Stylesheets and scripts can be brought into this theme as\nwith a normal HTML file. Navbars and tables of contents can also be generated\nand included automatically, through the \nnav\n and \ntoc\n objects, respectively.\nIf you wish to write your own theme, it is recommended to start with one of\nthe \nbuilt-in themes\n and modify it accordingly.\n\n\nTemplate Variables\n\uf0c1\n\n\nEach template in a theme is built with a template context. These are the\nvariables that are available to themes. The context varies depending on the\ntemplate that is being built. At the moment templates are either built with\nthe global context or with a page specific context. The global context is used\nfor HTML pages that don't represent an individual Markdown document, for\nexample a 404.html page or search.html.\n\n\nGlobal Context\n\uf0c1\n\n\nThe following variables in the context map directly the \nconfiguration options\n\n.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nConfiguration name\n\n\n\n\n\n\n\n\n\n\n\n\nsite_name\n\n\nsite_name\n\n\n\n\n\n\n\n\nsite_author\n\n\nsite_author\n\n\n\n\n\n\n\n\nfavicon\n\n\nsite_favicon\n\n\n\n\n\n\n\n\npage_description\n\n\nsite_description\n\n\n\n\n\n\n\n\nrepo_url\n\n\nrepo_url\n\n\n\n\n\n\n\n\nrepo_name\n\n\nrepo_name\n\n\n\n\n\n\n\n\nsite_url\n\n\nsite_url\n\n\n\n\n\n\n\n\nextra_css\n\n\nextra_css\n\n\n\n\n\n\n\n\nextra_javascript\n\n\nextra_javascript\n\n\n\n\n\n\n\n\nextra\n\n\nextra\n\n\n\n\n\n\n\n\ninclude_nav\n\n\ninclude_nav\n\n\n\n\n\n\n\n\ninclude_next_prev\n\n\ninclude_next_prev\n\n\n\n\n\n\n\n\ncopyright\n\n\ncopyright\n\n\n\n\n\n\n\n\ngoogle_analytics\n\n\ngoogle_analytics\n\n\n\n\n\n\n\n\n\n\nThe following variables provide information about the navigation and location.\n\n\nnav\n\uf0c1\n\n\nThe \nnav\n variable is used to create the navigation for the documentation.\nFollowing is a basic usage example which outputs the first and second level\nnavigation as a nested list.\n\n\n<ul>\n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n          <li>{{ nav_item.title }}\n              <ul>\n              {% for nav_item in nav_item.children %}\n                  <li class=\"{% if nav_item.active%}current{%endif%}\">\n                      <a href=\"{{ nav_item.url }}\">{{ nav_item.title }}</a>\n                  </li>\n              {% endfor %}\n              </ul>\n          </li>\n      {% else %}\n          <li class=\"{% if nav_item.active%}current{%endif%}\">\n              <a href=\"{{ nav_item.url }}\">{{ nav_item.title }}</a>\n          </li>\n      {% endif %}\n\n  {% endfor %}\n</ul>\n\n\n\n\nbase_url\n\uf0c1\n\n\nThe \nbase_url\n provides a relative path to the root of the MkDocs project.\nThis makes it easy to include links to static assets in your theme. For\nexample, if your theme includes a \njs\n folder, to include \ntheme.js\n from that\nfolder on all pages you would do this:\n\n\n<script src=\"{{ base_url }}/js/theme.js\"></script>\n\n\n\n\nhomepage_url\n\uf0c1\n\n\nProvides a relative path to the documentation homepage.\n\n\nmkdocs_version\n\uf0c1\n\n\nContains the current MkDocs version.\n\n\nbuild_date_utc\n\uf0c1\n\n\nA Python datetime object that represents the date and time the documentation\nwas built in UTC. This is useful for showing how recently the documentation\nwas updated.\n\n\nPage Context\n\uf0c1\n\n\nThe page context includes all of the above Global context and the following\nadditional variables.\n\n\npage_title\n\uf0c1\n\n\nContains the Title for the current page.\n\n\npage_description\n\uf0c1\n\n\nContains the description for the current page on the homepage, it is blank on\nother pages.\n\n\ncontent\n\uf0c1\n\n\nThe rendered Markdown as HTML, this is the contents of the documentation.\n\n\ntoc\n\uf0c1\n\n\nAn object representing the Table of contents for a page. Displaying the table\nof contents as a simple list can be achieved like this.\n\n\n<ul>\n{% for toc_item in toc %}\n    <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% endfor %}\n{% endfor %}\n</ul>\n\n\n\n\nmeta\n\uf0c1\n\n\nA mapping of the metadata included at the top of the markdown page. In this\nexample we define a \nsource\n property above the page title.\n\n\nsource: generics.py\n        mixins.py\n\n# Page title\n\nContent...\n\n\n\n\nA template can access this metadata for the page with the \nmeta.source\n\nvariable. This could then be used to link to source files related to the\ndocumentation page.\n\n\n{% for filename in meta.source %}\n  <a class=\"github\" href=\"https://github.com/.../{{ filename }}\">\n    <span class=\"label label-info\">{{ filename }}</span>\n  </a>\n{% endfor %}\n\n\n\n\ncanonical_url\n\uf0c1\n\n\nThe full, canonical URL to the current page. This includes the site_url from\nthe configuration.\n\n\ncurrent_page\n\uf0c1\n\n\nThe page object for the current page. The page path and url properties can be\ndisplayed like this.\n\n\n<h1>{{ current_page.title }}</h1>\n<p> This page is at {{ current_page.url }}</p>\n\n\n\n\nprevious_page\n\uf0c1\n\n\nThe page object for the previous  page. The usage is the same as for\n\ncurrent_page\n.\n\n\nnext_page\n\uf0c1\n\n\nThe page object for the next page.The usage is the same as for \ncurrent_page\n.\n\n\nExtra Context\n\uf0c1\n\n\nAdditional variables can be passed to the template with the\n\nextra\n configuration option. This is a\nset of key value pairs that can make custom templates far more flexible.\n\n\nFor example, this could be used to include the project version of all pages\nand a list of links related to the project. This can be achieved with the\nfollowing \nextra\n configuration:\n\n\nextra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n\n\n\n\nAnd then displayed with this HTML in the custom theme.\n\n\n{{ config.extra.version }}\n\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n\n\n\n\nSearch and themes\n\uf0c1\n\n\nAs of MkDocs \n0.13\n client side search support has been added to MkDocs with\n\nLunr.js\n.\n\n\nSearch can either be added to every page in the theme or to a dedicated\ntemplate which must be named \nsearch.html\n. The search template will be build\nwith the same name and can be viewable with \nmkdocs serve\n at\n\nhttp://localhost:8000/search.html\n. An example of the two different\napproaches can be seen by comparing the \nmkdocs\n and \nreadthedocs\n themes.\n\n\nThe following HTML needs to be added to the theme so the JavaScript is loaded\nfor Lunr.js.\n\n\n<script>var base_url = '{{ base_url }}';</script>\n<script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>\n\n\n\n\n\n\nNote\n\n\nThe above JavaScript will download the search index, for larger\ndocumentation projects this can be a heavy operation. In those cases, it\nis suggested that you either use the \nsearch.html\n approach to only\ninclude search on one page or load the JavaScript on an event like a form\nsubmit.\n\n\n\n\nThis loads the JavaScript and sets a global variable \nbase_url\n which allows\nthe JavaScript to make the links relative to the current page. The above\nJavaScript, with the following HTML in a \nsearch.html\n template will add a\nfull search implementation to your theme.\n\n\n<h1 id=\"search\">Search Results</h1>\n\n<form action=\"search.html\">\n  <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" >\n</form>\n\n<div id=\"mkdocs-search-results\">\n  Sorry, page not found.\n</div>\n\n\n\n\nThis works by looking for the specific ID's used in the above HTML. The input\nfor the user to type the search query must have the ID \nmkdocs-search-query\n\nand \nmkdocs-search-results\n is the directory where the results will be placed.\n\n\nPackaging Themes\n\uf0c1\n\n\nMkDocs makes use of \nPython packaging\n to distribute themes. This comes with a\nfew requirements.\n\n\nTo see an example of a package containing one theme, see the \nMkDocs Bootstrap\ntheme\n and to see a package that contains many themes, see the \nMkDocs\nBootswatch theme\n.\n\n\nPackage Layout\n\uf0c1\n\n\nThe following layout is recommended for themes. Two files at the top level\ndirectory called \nMANIFEST.in\n amd \nsetup.py\n. Then a directory with the name\nof your theme and containing a \nbase.html\n file and a \n__init__.py\n.\n\n\n.\n|-- MANIFEST.in\n|-- theme_name\n|   |-- base.html\n|   |-- __init__.py\n`-- setup.py\n\n\n\n\nThe \nMANIFEST.in\n file should contain the following contents but with\ntheme_name updated and any extra file extensions added to the include.\n\n\nrecursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n\n\n\n\nThe \nsetup.py\n should include the following text with the modifications\ndescribed below.\n\n\nfrom setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\n\nsetup(\n    name=\"mkdocs-themename\",\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)\n\n\n\n\nFill in the URL, license, description, author and author email address.\n\n\nThe name should follow the convention \nmkdocs-themename\n (like \nmkdocs-\nbootstrap\n and \nmkdocs-bootswatch\n), starting with MkDocs, using hyphens to\nseparate words and including the name of your theme.\n\n\nMost of the rest of the file can be left unedited. The last section we need to\nchange is the entry_points. This is how MkDocs finds the theme(s) you are\nincluding in the package. The name on the left is the one that users will use\nin their mkdocs.yml and the one on the right is the directory containing your\ntheme files.\n\n\nThe directory you created at the start of this section with the base.html file\nshould contain all of the other theme files. The minimum requirement is that\nit includes a \nbase.html\n for the theme. It \nmust\n also include a\n\n__init__.py\n file which should be empty, this file tells Python that the\ndirectory is a package.\n\n\nDistributing Themes\n\uf0c1\n\n\nWith the above changes, your theme should now be ready to install. This can be\ndone with pip, using \npip install .\n if you are still in the same directory as\nthe setup.py.\n\n\nMost Python packages, including MkDocs, are distributed on PyPI. To do this,\nyou should run the following command.\n\n\npython setup.py register\n\n\n\n\nIf you don't have an account setup, you should be prompted to create one.\n\n\nFor a much more detailed guide, see the official Python packaging\ndocumentation for \nPackaging and Distributing Projects\n.",
            "title": "Custom Themes"
        },
        {
            "location": "/user-guide/custom-themes/#custom-themes",
            "text": "A guide to creating and distributing custom themes.    Note  If you are looking for third party themes, they are listed in the MkDocs community wiki . If\nyou want to share a theme you create, you should list it on the Wiki.   When creating a new theme, you can either follow the steps in this guide to\ncreate one from scratch or you can download the  mkdocs-basic-theme  as a\nbasic, yet complete, theme with all the boilerplate required.  You can find\nthis base theme on  GitHub .\nIt contains detailed comments in the code to describe the different features\nand their usage.",
            "title": "Custom themes"
        },
        {
            "location": "/user-guide/custom-themes/#creating-a-custom-theme",
            "text": "The bare minimum required for a custom theme is a  base.html   Jinja2\ntemplate  file. This should be placed in a directory which will be the theme_dir  and it should be created next to the  mkdocs.yml  configuration\nfile. Within  mkdocs.yml , specify the  theme_dir  option and set it to the\nname of the directory containing  base.html . For example, given this example\nproject layout:  mkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...  You would include the following setting to use the custom theme directory:  theme_dir: 'custom_theme'  If used in combination with the  theme  configuration value a custom theme can\nbe used to replace only specific parts of a built-in theme. For example, with\nthe above layout and if you set  theme: mkdocs  then the  base.html  file\nwould replace that in the theme but otherwise it would remain the same. This\nis useful if you want to make small adjustments to an existing theme.",
            "title": "Creating a custom theme"
        },
        {
            "location": "/user-guide/custom-themes/#basic-theme",
            "text": "The simplest  base.html  file is the following:  <!DOCTYPE html>\n<html>\n  <head>\n    <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>  Article content from each page specified in  mkdocs.yml  is inserted using the {{ content }}  tag. Stylesheets and scripts can be brought into this theme as\nwith a normal HTML file. Navbars and tables of contents can also be generated\nand included automatically, through the  nav  and  toc  objects, respectively.\nIf you wish to write your own theme, it is recommended to start with one of\nthe  built-in themes  and modify it accordingly.",
            "title": "Basic theme"
        },
        {
            "location": "/user-guide/custom-themes/#template-variables",
            "text": "Each template in a theme is built with a template context. These are the\nvariables that are available to themes. The context varies depending on the\ntemplate that is being built. At the moment templates are either built with\nthe global context or with a page specific context. The global context is used\nfor HTML pages that don't represent an individual Markdown document, for\nexample a 404.html page or search.html.",
            "title": "Template Variables"
        },
        {
            "location": "/user-guide/custom-themes/#global-context",
            "text": "The following variables in the context map directly the  configuration options .     Variable Name  Configuration name       site_name  site_name     site_author  site_author     favicon  site_favicon     page_description  site_description     repo_url  repo_url     repo_name  repo_name     site_url  site_url     extra_css  extra_css     extra_javascript  extra_javascript     extra  extra     include_nav  include_nav     include_next_prev  include_next_prev     copyright  copyright     google_analytics  google_analytics      The following variables provide information about the navigation and location.",
            "title": "Global Context"
        },
        {
            "location": "/user-guide/custom-themes/#nav",
            "text": "The  nav  variable is used to create the navigation for the documentation.\nFollowing is a basic usage example which outputs the first and second level\nnavigation as a nested list.  <ul>\n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n          <li>{{ nav_item.title }}\n              <ul>\n              {% for nav_item in nav_item.children %}\n                  <li class=\"{% if nav_item.active%}current{%endif%}\">\n                      <a href=\"{{ nav_item.url }}\">{{ nav_item.title }}</a>\n                  </li>\n              {% endfor %}\n              </ul>\n          </li>\n      {% else %}\n          <li class=\"{% if nav_item.active%}current{%endif%}\">\n              <a href=\"{{ nav_item.url }}\">{{ nav_item.title }}</a>\n          </li>\n      {% endif %}\n\n  {% endfor %}\n</ul>",
            "title": "nav"
        },
        {
            "location": "/user-guide/custom-themes/#base_url",
            "text": "The  base_url  provides a relative path to the root of the MkDocs project.\nThis makes it easy to include links to static assets in your theme. For\nexample, if your theme includes a  js  folder, to include  theme.js  from that\nfolder on all pages you would do this:  <script src=\"{{ base_url }}/js/theme.js\"></script>",
            "title": "base_url"
        },
        {
            "location": "/user-guide/custom-themes/#homepage_url",
            "text": "Provides a relative path to the documentation homepage.",
            "title": "homepage_url"
        },
        {
            "location": "/user-guide/custom-themes/#mkdocs_version",
            "text": "Contains the current MkDocs version.",
            "title": "mkdocs_version"
        },
        {
            "location": "/user-guide/custom-themes/#build_date_utc",
            "text": "A Python datetime object that represents the date and time the documentation\nwas built in UTC. This is useful for showing how recently the documentation\nwas updated.",
            "title": "build_date_utc"
        },
        {
            "location": "/user-guide/custom-themes/#page-context",
            "text": "The page context includes all of the above Global context and the following\nadditional variables.",
            "title": "Page Context"
        },
        {
            "location": "/user-guide/custom-themes/#page_title",
            "text": "Contains the Title for the current page.",
            "title": "page_title"
        },
        {
            "location": "/user-guide/custom-themes/#page_description",
            "text": "Contains the description for the current page on the homepage, it is blank on\nother pages.",
            "title": "page_description"
        },
        {
            "location": "/user-guide/custom-themes/#content",
            "text": "The rendered Markdown as HTML, this is the contents of the documentation.",
            "title": "content"
        },
        {
            "location": "/user-guide/custom-themes/#toc",
            "text": "An object representing the Table of contents for a page. Displaying the table\nof contents as a simple list can be achieved like this.  <ul>\n{% for toc_item in toc %}\n    <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% endfor %}\n{% endfor %}\n</ul>",
            "title": "toc"
        },
        {
            "location": "/user-guide/custom-themes/#meta",
            "text": "A mapping of the metadata included at the top of the markdown page. In this\nexample we define a  source  property above the page title.  source: generics.py\n        mixins.py\n\n# Page title\n\nContent...  A template can access this metadata for the page with the  meta.source \nvariable. This could then be used to link to source files related to the\ndocumentation page.  {% for filename in meta.source %}\n  <a class=\"github\" href=\"https://github.com/.../{{ filename }}\">\n    <span class=\"label label-info\">{{ filename }}</span>\n  </a>\n{% endfor %}",
            "title": "meta"
        },
        {
            "location": "/user-guide/custom-themes/#canonical_url",
            "text": "The full, canonical URL to the current page. This includes the site_url from\nthe configuration.",
            "title": "canonical_url"
        },
        {
            "location": "/user-guide/custom-themes/#current_page",
            "text": "The page object for the current page. The page path and url properties can be\ndisplayed like this.  <h1>{{ current_page.title }}</h1>\n<p> This page is at {{ current_page.url }}</p>",
            "title": "current_page"
        },
        {
            "location": "/user-guide/custom-themes/#previous_page",
            "text": "The page object for the previous  page. The usage is the same as for current_page .",
            "title": "previous_page"
        },
        {
            "location": "/user-guide/custom-themes/#next_page",
            "text": "The page object for the next page.The usage is the same as for  current_page .",
            "title": "next_page"
        },
        {
            "location": "/user-guide/custom-themes/#extra-context",
            "text": "Additional variables can be passed to the template with the extra  configuration option. This is a\nset of key value pairs that can make custom templates far more flexible.  For example, this could be used to include the project version of all pages\nand a list of links related to the project. This can be achieved with the\nfollowing  extra  configuration:  extra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/  And then displayed with this HTML in the custom theme.  {{ config.extra.version }}\n\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}",
            "title": "Extra Context"
        },
        {
            "location": "/user-guide/custom-themes/#search-and-themes",
            "text": "As of MkDocs  0.13  client side search support has been added to MkDocs with Lunr.js .  Search can either be added to every page in the theme or to a dedicated\ntemplate which must be named  search.html . The search template will be build\nwith the same name and can be viewable with  mkdocs serve  at http://localhost:8000/search.html . An example of the two different\napproaches can be seen by comparing the  mkdocs  and  readthedocs  themes.  The following HTML needs to be added to the theme so the JavaScript is loaded\nfor Lunr.js.  <script>var base_url = '{{ base_url }}';</script>\n<script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>   Note  The above JavaScript will download the search index, for larger\ndocumentation projects this can be a heavy operation. In those cases, it\nis suggested that you either use the  search.html  approach to only\ninclude search on one page or load the JavaScript on an event like a form\nsubmit.   This loads the JavaScript and sets a global variable  base_url  which allows\nthe JavaScript to make the links relative to the current page. The above\nJavaScript, with the following HTML in a  search.html  template will add a\nfull search implementation to your theme.  <h1 id=\"search\">Search Results</h1>\n\n<form action=\"search.html\">\n  <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" >\n</form>\n\n<div id=\"mkdocs-search-results\">\n  Sorry, page not found.\n</div>  This works by looking for the specific ID's used in the above HTML. The input\nfor the user to type the search query must have the ID  mkdocs-search-query \nand  mkdocs-search-results  is the directory where the results will be placed.",
            "title": "Search and themes"
        },
        {
            "location": "/user-guide/custom-themes/#packaging-themes",
            "text": "MkDocs makes use of  Python packaging  to distribute themes. This comes with a\nfew requirements.  To see an example of a package containing one theme, see the  MkDocs Bootstrap\ntheme  and to see a package that contains many themes, see the  MkDocs\nBootswatch theme .",
            "title": "Packaging Themes"
        },
        {
            "location": "/user-guide/custom-themes/#package-layout",
            "text": "The following layout is recommended for themes. Two files at the top level\ndirectory called  MANIFEST.in  amd  setup.py . Then a directory with the name\nof your theme and containing a  base.html  file and a  __init__.py .  .\n|-- MANIFEST.in\n|-- theme_name\n|   |-- base.html\n|   |-- __init__.py\n`-- setup.py  The  MANIFEST.in  file should contain the following contents but with\ntheme_name updated and any extra file extensions added to the include.  recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]  The  setup.py  should include the following text with the modifications\ndescribed below.  from setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\n\nsetup(\n    name=\"mkdocs-themename\",\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)  Fill in the URL, license, description, author and author email address.  The name should follow the convention  mkdocs-themename  (like  mkdocs-\nbootstrap  and  mkdocs-bootswatch ), starting with MkDocs, using hyphens to\nseparate words and including the name of your theme.  Most of the rest of the file can be left unedited. The last section we need to\nchange is the entry_points. This is how MkDocs finds the theme(s) you are\nincluding in the package. The name on the left is the one that users will use\nin their mkdocs.yml and the one on the right is the directory containing your\ntheme files.  The directory you created at the start of this section with the base.html file\nshould contain all of the other theme files. The minimum requirement is that\nit includes a  base.html  for the theme. It  must  also include a __init__.py  file which should be empty, this file tells Python that the\ndirectory is a package.",
            "title": "Package Layout"
        },
        {
            "location": "/user-guide/custom-themes/#distributing-themes",
            "text": "With the above changes, your theme should now be ready to install. This can be\ndone with pip, using  pip install .  if you are still in the same directory as\nthe setup.py.  Most Python packages, including MkDocs, are distributed on PyPI. To do this,\nyou should run the following command.  python setup.py register  If you don't have an account setup, you should be prompted to create one.  For a much more detailed guide, see the official Python packaging\ndocumentation for  Packaging and Distributing Projects .",
            "title": "Distributing Themes"
        },
        {
            "location": "/about/release-notes/",
            "text": "Release Notes\n\uf0c1\n\n\n\n\nUpgrading\n\uf0c1\n\n\nTo upgrade MkDocs to the latest version, use pip:\n\n\npip install -U mkdocs\n\n\n\nYou can determine your currently installed version using \nmkdocs --version\n:\n\n\n$ mkdocs --version\nmkdocs, version 0.15.2\n\n\n\nVersion 0.16 (2016-02-??)\n\uf0c1\n\n\n\n\nAdd a flag (-e/--theme-dir) to specifiy theme directory with the commands\n  \nmkdocs build\n and \nmkdocs serve\n (#832)\n\n\nFixed issues with Unicode filenames under Windows and Python 2. (#833)\n\n\nImproved the styling of in-line code in the MkDocs theme. (#718)\n\n\nBugfix: convert variables to JSON when being passed to JavaScript (#850)\n\n\nUpdated the ReadTheDocs theme to match the upstream font sizes and colours\n  more closely. (#857)\n\n\nFixes an issue with permalink markers showing when the mouse was far above\n  them (#843)\n\n\nBugfix: Handle periods in directory name when automatically creating the\n  pages config. (#728)\n\n\nUpdate searching to Lunr 0.7, which comes with some performance enhancements\n  for larger documents (#859)\n\n\n\n\nVersion 0.15.3 (2016-02-18)\n\uf0c1\n\n\n\n\nImprove the error message the given theme can't be found.\n\n\nFix an issue with relative symlinks (#639)\n\n\n\n\nVersion 0.15.2 (2016-02-08)\n\uf0c1\n\n\n\n\nFix an incorrect warning that states external themes \nwill be removed from\n  MkDocs\n.\n\n\n\n\nVersion 0.15.1 (2016-01-30)\n\uf0c1\n\n\n\n\nLower the minimum supported Click version to 3.3 for package maintainers.\n  (#763)\n\n\n\n\nVersion 0.15.0 (2016-01-21)\n\uf0c1\n\n\nMajor Additions to Version 0.15.0\n\uf0c1\n\n\nAdd support for installable themes\n\uf0c1\n\n\nMkDocs now supports themes that are distributed via Python packages. With this\naddition, the Bootstrap and Bootswatch themes have been moved to external git\nrepositories and python packages. See their individual documentation for more\ndetails about these specific themes.\n\n\n\n\nMkDocs Bootstrap\n\n\nMkDocs Bootswatch\n\n\n\n\nThey will be included with MkDocs by default until a future release. After that\nthey will be installable with pip: \npip install mkdocs-bootstrap\n and \npip\ninstall mkdocs-bootswatch\n\n\nSee the documentation for \nStyling your docs\n for more information about using\nand customising themes and \nCustom themes\n for creating and distributing new\nthemes\n\n\nOther Changes and Additions to Version 0.15.0\n\uf0c1\n\n\n\n\nFix issues when using absolute links to Markdown files. (#628)\n\n\nDeprecate support of Python 2.6, pending removal in 1.0.0. (#165)\n\n\nAdd official support for Python version 3.5.\n\n\nAdd support for \nsite_description\n and \nsite_author\n to the \nReadTheDocs\n\n  theme. (#631)\n\n\nUpdate FontAwesome to 4.5.0. (#789)\n\n\nIncrease IE support with X-UA-Compatible. (#785)\n\n\nAdded support for Python's \n-m\n flag. (#706)\n\n\nBugfix: Ensure consistent ordering of auto-populated pages. (#638)\n\n\nBugfix: Scroll the tables of contents on the MkDocs theme if it is too long\n  for the page. (#204)\n\n\nBugfix: Add all ancestors to the page attribute \nancestors\n rather than just\n  the initial one. (#693)\n\n\nBugfix: Include HTML in the build output again. (#691)\n\n\nBugfix: Provide filename to Read the Docs. (#721 and RTD#1480)\n\n\nBugfix: Silence Click's unicode_literals warning. (#708)\n\n\n\n\nVersion 0.14.0 (2015-06-09)\n\uf0c1\n\n\n\n\nImprove Unicode handling by ensuring that all config strings are loaded as\n  Unicode. (#592)\n\n\nRemove dependancy on the six library. (#583)\n\n\nRemove dependancy on the ghp-import library. (#547)\n\n\nAdd \n--quiet\n and \n--verbose\n options to all subcommands. (#579)\n\n\nAdd short options (\n-a\n) to most command line options. (#579)\n\n\nAdd copyright footer for readthedocs theme. (#568)\n\n\nIf the requested port in \nmkdocs serve\n is already in use, don't show the\n  user a full stack trace. (#596)\n\n\nBugfix: Fix a JavaScript encoding problem when searching with spaces. (#586)\n\n\nBugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root.\n  (#578)\n\n\nBugfix: Handle (pass-through instead of dropping) HTML entities while\n  parsing TOC. (#612)\n\n\nBugfix: Default extra_templates to an empty list, don't automatically\n  discover them. (#616)\n\n\n\n\nVersion 0.13.3 (2015-06-02)\n\uf0c1\n\n\n\n\nBugfix: Reduce validation error to a warning if the site_dir is within\n  the docs_dir as this shouldn't cause any problems with building but will\n  inconvenience users building multiple times. (#580)\n\n\n\n\nVersion 0.13.2 (2015-05-30)\n\uf0c1\n\n\n\n\nBugfix: Ensure all errors and warnings are logged before exiting. (#536)\n\n\nBugfix: Fix compatibility issues with ReadTheDocs. (#554)\n\n\n\n\nVersion 0.13.1 (2015-05-27)\n\uf0c1\n\n\n\n\nBugfix: Fix a problem with minimal configurations which only contain a list\n  of paths in the pages config. (#562)\n\n\n\n\nVersion 0.13.0 (2015-05-26)\n\uf0c1\n\n\nDeprecations to Version 0.13.0\n\uf0c1\n\n\nDeprecate the JSON command\n\uf0c1\n\n\nIn this release the  \nmkdocs json\n command has been marked as deprecated and\nwhen used a deprecation warning will be shown. It will be removed in a \nfuture\nrelease\n of MkDocs, version 1.0 at the latest. The \nmkdocs json\n command\nprovided  a convenient way for users to output the documentation contents as\nJSON files but with the additions of search to MkDocs this functionality is\nduplicated.\n\n\nA new index with all the contents from a MkDocs build is created in the\n\nsite_dir\n, so with the default value for the \nsite_dir\n It can be found in\n\nsite/mkdocs/search_index.json\n.\n\n\nThis new file is created on every MkDocs build (with \nmkdocs build\n) and\nno configuration is needed to enable it.\n\n\nChange the pages configuration\n\uf0c1\n\n\nProvide a \nnew way\n to define pages, and specifically \nnested pages\n, in the\nmkdocs.yml file and deprecate the existing approach, support will be removed\nwith MkDocs 1.0.\n\n\nWarn users about the removal of builtin themes\n\uf0c1\n\n\nAll themes other than mkdocs and readthedocs will be moved into external\npackages in a future release of MkDocs. This will enable them to be more easily\nsupported and updates outside MkDocs releases.\n\n\nMajor Additions to Version 0.13.0\n\uf0c1\n\n\nSearch\n\uf0c1\n\n\nSupport for search has now been added to MkDocs. This is based on the\nJavaScript library \nlunr.js\n. It has been added to both the \nmkdocs\n and\n\nreadthedocs\n themes. See the custom theme documentation on \nsupporting search\n\nfor adding it to your own themes.\n\n\nNew Command Line Interface\n\uf0c1\n\n\nThe command line interface for MkDocs has been re-written with the Python\nlibrary \nClick\n. This means that MkDocs now has an easier to use interface\nwith better help output.\n\n\nThis change is partially backwards incompatible as while undocumented it was\npossible to pass any configuration option to the different commands. Now only\na small subset of the configuration options can be passed to the commands. To\nsee in full commands and available arguments use \nmkdocs --help\n and\n\nmkdocs build --help\n to have them displayed.\n\n\nSupport Extra HTML and XML files\n\uf0c1\n\n\nLike the \nextra_javascript\n and \nextra_css\n configuration options, a new\noption named \nextra_templates\n has been added. This will automatically be\npopulated with any \n.html\n or \n.xml\n files in the project docs directory.\n\n\nUsers can place static HTML and XML files and they will be copied over, or they\ncan also use Jinja2 syntax and take advantage of the \nglobal variables\n.\n\n\nBy default MkDocs will use this approach to create a sitemap for the\ndocumentation.\n\n\nOther Changes and Additions to Version 0.13.0\n\uf0c1\n\n\n\n\nAdd support for \nMarkdown extension configuration options\n. (#435)\n\n\nMkDocs now ships Python \nwheels\n. (#486)\n\n\nOnly include the build date and MkDocs version on the homepage. (#490)\n\n\nGenerate sitemaps for documentation builds. (#436)\n\n\nAdd a clearer way to define nested pages in the configuration. (#482)\n\n\nAdd an \nextra config\n option for passing arbitrary variables to the template. (#510)\n\n\nAdd \n--no-livereload\n to \nmkdocs serve\n for a simpler development server. (#511)\n\n\nAdd copyright display support to all themes (#549)\n\n\nAdd support for custom commit messages in a \nmkdocs gh-deploy\n (#516)\n\n\nBugfix: Fix linking to media within the same directory as a markdown file\n  called index.md (#535)\n\n\nBugfix: Fix errors with unicode filenames (#542).\n\n\n\n\nVersion 0.12.2 (2015-04-22)\n\uf0c1\n\n\n\n\nBugfix: Fix a regression where there would be an error if some child titles\n  were missing but others were provided in the pages config. (#464)\n\n\n\n\nVersion 0.12.1 (2015-04-14)\n\uf0c1\n\n\n\n\nBugfix: Fixed a CSS bug in the table of contents on some browsers where the\n  bottom item was not clickable.\n\n\n\n\nVersion 0.12.0 (2015-04-14)\n\uf0c1\n\n\n\n\nDisplay the current MkDocs version in the CLI output. (#258)\n\n\nCheck for CNAME file when using gh-deploy. (#285)\n\n\nAdd the homepage back to the navigation on all themes. (#271)\n\n\nAdd a strict more for local link checking. (#279)\n\n\nAdd Google analytics support to all themes. (#333)\n\n\nAdd build date and MkDocs version to the ReadTheDocs and MkDocs theme\n  outputs. (#382)\n\n\nStandardise highlighting across all themes and add missing languages. (#387)\n\n\nAdd a verbose flag. (-v) to show more details about what the build. (#147)\n\n\nAdd the option to specify a remote branch when deploying to GitHub. This\n  enables deploying to GitHub pages on personal and repo sites. (#354)\n\n\nAdd favicon support to the ReadTheDocs theme HTML. (#422)\n\n\nAutomatically refresh the browser when files are edited. (#163)\n\n\nBugfix: Never re-write URL's in code blocks. (#240)\n\n\nBugfix: Don't copy ditfiles when copying media from the \ndocs_dir\n. (#254)\n\n\nBugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106)\n\n\nBugfix: Add padding to the bottom of all bootstrap themes. (#255)\n\n\nBugfix: Fix issues with nested Markdown pages and the automatic pages\n  configuration. (#276)\n\n\nBugfix: Fix a URL parsing error with GitHub enterprise. (#284)\n\n\nBugfix: Don't error if the mkdocs.yml is completely empty. (#288)\n\n\nBugfix: Fix a number of problems with relative urls and Markdown files. (#292)\n\n\nBugfix: Don't stop the build if a page can't be found, continue with other\n  pages. (#150)\n\n\nBugfix: Remove the site_name from the page title, this needs to be added\n  manually. (#299)\n\n\nBugfix: Fix an issue with table of contents cutting off Markdown. (#294)\n\n\nBugfix: Fix hostname for BitBucket. (#339)\n\n\nBugfix: Ensure all links end with a slash. (#344)\n\n\nBugfix: Fix repo links in the readthedocs theme. (#365)\n\n\nBugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143)\n\n\nBugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384)\n\n\nBugfix: Remove inline CSS in the ReadTheDocs theme. (#393)\n\n\nBugfix: Fix problems with the child titles due to the order the pages config\n  was processed. (#395)\n\n\nBugfix: Don't error during live reload when the theme doesn't exist. (#373)\n\n\nBugfix: Fix problems with the Meta extension when it may not exist. (#398)\n\n\nBugfix: Wrap long inline code otherwise they will run off the screen. (#313)\n\n\nBugfix: Remove HTML parsing regular expressions and parse with HTMLParser to\n  fix problems with titles containing code. (#367)\n\n\nBugfix: Fix an issue with the scroll to anchor causing the title to be hidden\n  under the navigation. (#7)\n\n\nBugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295)\n\n\nBugfix: Fix an error when passing in a specific config file with\n  \nmkdocs serve\n. (#341)\n\n\nBugfix: Don't overwrite index.md diles with the \nmkdocs new\n command. (#412)\n\n\nBugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411)\n\n\nBugfix: Display images inline in the MkDocs theme. (#415)\n\n\nBugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319)\n\n\nBugfix: Don't delete hidden files when using \nmkdocs build --clean\n. (#346)\n\n\nBugfix: Don't block newer verions of Python-markdown on Python >= 2.7. (#376)\n\n\nBugfix: Fix encoding issues when opening files across platforms. (#428)\n\n\n\n\nVersion 0.11.1 (2014-11-20)\n\uf0c1\n\n\n\n\nBugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs\n  theme. (#233)\n\n\n\n\nVersion 0.11.0 (2014-11-18)\n\uf0c1\n\n\n\n\nRender 404.html files if they exist for the current theme. (#194)\n\n\nBugfix: Fix long nav bars, table rendering and code highlighting in MkDocs\n  and ReadTheDocs themes. (#225)\n\n\nBugfix: Fix an issue with the google_analytics code. (#219)\n\n\nBugfix: Remove \n__pycache__\n from the package tar. (#196)\n\n\nBugfix: Fix markdown links that go to an anchor on the current page. (#197)\n\n\nBugfix: Don't add \nprettyprint well\n CSS classes to all HTML, only add it in\n  the MkDocs theme. (#183)\n\n\nBugfix: Display section titles in the ReadTheDocs theme. (#175)\n\n\nBugfix: Use the polling observer in watchdog so rebuilding works on\n  filesystems without inotify. (#184)\n\n\nBugfix: Improve error output for common configuration related errors. (#176)\n\n\n\n\nVersion 0.10.0 (2014-10-29)\n\uf0c1\n\n\n\n\nAdded support for Python 3.3 and 3.4. (#103)\n\n\nConfigurable Python-Markdown extensions with the config setting\n  \nmarkdown_extensions\n. (#74)\n\n\nAdded \nmkdocs json\n command to output your rendered\n  documentation as json files. (#128)\n\n\nAdded \n--clean\n switch to \nbuild\n, \njson\n and \ngh-deploy\n commands to\n  remove stale files from the output directory. (#157)\n\n\nSupport multiple theme directories to allow replacement of\n  individual templates rather than copying the full theme. (#129)\n\n\nBugfix: Fix \n<ul>\n rendering in readthedocs theme. (#171)\n\n\nBugfix: Improve the readthedocs theme on smaller displays. (#168)\n\n\nBugfix: Relaxed required python package versions to avoid clashes. (#104)\n\n\nBugfix: Fix issue rendering the table of contents with some configs. (#146)\n\n\nBugfix: Fix path for embedded images in sub pages. (#138)\n\n\nBugfix: Fix \nuse_directory_urls\n config behaviour. (#63)\n\n\nBugfix: Support \nextra_javascript\n and \nextra_css\n in all themes. (#90)\n\n\nBugfix: Fix path-handling under Windows. (#121)\n\n\nBugfix: Fix the menu generation in the readthedocs theme. (#110)\n\n\nBugfix: Fix the mkdocs command creation under Windows. (#122)\n\n\nBugfix: Correctly handle external \nextra_javascript\n and \nextra_css\n. (#92)\n\n\nBugfix: Fixed favicon support. (#87)",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#upgrading",
            "text": "To upgrade MkDocs to the latest version, use pip:  pip install -U mkdocs  You can determine your currently installed version using  mkdocs --version :  $ mkdocs --version\nmkdocs, version 0.15.2",
            "title": "Upgrading"
        },
        {
            "location": "/about/release-notes/#version-016-2016-02-",
            "text": "Add a flag (-e/--theme-dir) to specifiy theme directory with the commands\n   mkdocs build  and  mkdocs serve  (#832)  Fixed issues with Unicode filenames under Windows and Python 2. (#833)  Improved the styling of in-line code in the MkDocs theme. (#718)  Bugfix: convert variables to JSON when being passed to JavaScript (#850)  Updated the ReadTheDocs theme to match the upstream font sizes and colours\n  more closely. (#857)  Fixes an issue with permalink markers showing when the mouse was far above\n  them (#843)  Bugfix: Handle periods in directory name when automatically creating the\n  pages config. (#728)  Update searching to Lunr 0.7, which comes with some performance enhancements\n  for larger documents (#859)",
            "title": "Version 0.16 (2016-02-??)"
        },
        {
            "location": "/about/release-notes/#version-0153-2016-02-18",
            "text": "Improve the error message the given theme can't be found.  Fix an issue with relative symlinks (#639)",
            "title": "Version 0.15.3 (2016-02-18)"
        },
        {
            "location": "/about/release-notes/#version-0152-2016-02-08",
            "text": "Fix an incorrect warning that states external themes  will be removed from\n  MkDocs .",
            "title": "Version 0.15.2 (2016-02-08)"
        },
        {
            "location": "/about/release-notes/#version-0151-2016-01-30",
            "text": "Lower the minimum supported Click version to 3.3 for package maintainers.\n  (#763)",
            "title": "Version 0.15.1 (2016-01-30)"
        },
        {
            "location": "/about/release-notes/#version-0150-2016-01-21",
            "text": "",
            "title": "Version 0.15.0 (2016-01-21)"
        },
        {
            "location": "/about/release-notes/#major-additions-to-version-0150",
            "text": "",
            "title": "Major Additions to Version 0.15.0"
        },
        {
            "location": "/about/release-notes/#add-support-for-installable-themes",
            "text": "MkDocs now supports themes that are distributed via Python packages. With this\naddition, the Bootstrap and Bootswatch themes have been moved to external git\nrepositories and python packages. See their individual documentation for more\ndetails about these specific themes.   MkDocs Bootstrap  MkDocs Bootswatch   They will be included with MkDocs by default until a future release. After that\nthey will be installable with pip:  pip install mkdocs-bootstrap  and  pip\ninstall mkdocs-bootswatch  See the documentation for  Styling your docs  for more information about using\nand customising themes and  Custom themes  for creating and distributing new\nthemes",
            "title": "Add support for installable themes"
        },
        {
            "location": "/about/release-notes/#other-changes-and-additions-to-version-0150",
            "text": "Fix issues when using absolute links to Markdown files. (#628)  Deprecate support of Python 2.6, pending removal in 1.0.0. (#165)  Add official support for Python version 3.5.  Add support for  site_description  and  site_author  to the  ReadTheDocs \n  theme. (#631)  Update FontAwesome to 4.5.0. (#789)  Increase IE support with X-UA-Compatible. (#785)  Added support for Python's  -m  flag. (#706)  Bugfix: Ensure consistent ordering of auto-populated pages. (#638)  Bugfix: Scroll the tables of contents on the MkDocs theme if it is too long\n  for the page. (#204)  Bugfix: Add all ancestors to the page attribute  ancestors  rather than just\n  the initial one. (#693)  Bugfix: Include HTML in the build output again. (#691)  Bugfix: Provide filename to Read the Docs. (#721 and RTD#1480)  Bugfix: Silence Click's unicode_literals warning. (#708)",
            "title": "Other Changes and Additions to Version 0.15.0"
        },
        {
            "location": "/about/release-notes/#version-0140-2015-06-09",
            "text": "Improve Unicode handling by ensuring that all config strings are loaded as\n  Unicode. (#592)  Remove dependancy on the six library. (#583)  Remove dependancy on the ghp-import library. (#547)  Add  --quiet  and  --verbose  options to all subcommands. (#579)  Add short options ( -a ) to most command line options. (#579)  Add copyright footer for readthedocs theme. (#568)  If the requested port in  mkdocs serve  is already in use, don't show the\n  user a full stack trace. (#596)  Bugfix: Fix a JavaScript encoding problem when searching with spaces. (#586)  Bugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root.\n  (#578)  Bugfix: Handle (pass-through instead of dropping) HTML entities while\n  parsing TOC. (#612)  Bugfix: Default extra_templates to an empty list, don't automatically\n  discover them. (#616)",
            "title": "Version 0.14.0 (2015-06-09)"
        },
        {
            "location": "/about/release-notes/#version-0133-2015-06-02",
            "text": "Bugfix: Reduce validation error to a warning if the site_dir is within\n  the docs_dir as this shouldn't cause any problems with building but will\n  inconvenience users building multiple times. (#580)",
            "title": "Version 0.13.3 (2015-06-02)"
        },
        {
            "location": "/about/release-notes/#version-0132-2015-05-30",
            "text": "Bugfix: Ensure all errors and warnings are logged before exiting. (#536)  Bugfix: Fix compatibility issues with ReadTheDocs. (#554)",
            "title": "Version 0.13.2 (2015-05-30)"
        },
        {
            "location": "/about/release-notes/#version-0131-2015-05-27",
            "text": "Bugfix: Fix a problem with minimal configurations which only contain a list\n  of paths in the pages config. (#562)",
            "title": "Version 0.13.1 (2015-05-27)"
        },
        {
            "location": "/about/release-notes/#version-0130-2015-05-26",
            "text": "",
            "title": "Version 0.13.0 (2015-05-26)"
        },
        {
            "location": "/about/release-notes/#deprecations-to-version-0130",
            "text": "",
            "title": "Deprecations to Version 0.13.0"
        },
        {
            "location": "/about/release-notes/#deprecate-the-json-command",
            "text": "In this release the   mkdocs json  command has been marked as deprecated and\nwhen used a deprecation warning will be shown. It will be removed in a  future\nrelease  of MkDocs, version 1.0 at the latest. The  mkdocs json  command\nprovided  a convenient way for users to output the documentation contents as\nJSON files but with the additions of search to MkDocs this functionality is\nduplicated.  A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the  site_dir  It can be found in site/mkdocs/search_index.json .  This new file is created on every MkDocs build (with  mkdocs build ) and\nno configuration is needed to enable it.",
            "title": "Deprecate the JSON command"
        },
        {
            "location": "/about/release-notes/#change-the-pages-configuration",
            "text": "Provide a  new way  to define pages, and specifically  nested pages , in the\nmkdocs.yml file and deprecate the existing approach, support will be removed\nwith MkDocs 1.0.",
            "title": "Change the pages configuration"
        },
        {
            "location": "/about/release-notes/#warn-users-about-the-removal-of-builtin-themes",
            "text": "All themes other than mkdocs and readthedocs will be moved into external\npackages in a future release of MkDocs. This will enable them to be more easily\nsupported and updates outside MkDocs releases.",
            "title": "Warn users about the removal of builtin themes"
        },
        {
            "location": "/about/release-notes/#major-additions-to-version-0130",
            "text": "",
            "title": "Major Additions to Version 0.13.0"
        },
        {
            "location": "/about/release-notes/#search",
            "text": "Support for search has now been added to MkDocs. This is based on the\nJavaScript library  lunr.js . It has been added to both the  mkdocs  and readthedocs  themes. See the custom theme documentation on  supporting search \nfor adding it to your own themes.",
            "title": "Search"
        },
        {
            "location": "/about/release-notes/#new-command-line-interface",
            "text": "The command line interface for MkDocs has been re-written with the Python\nlibrary  Click . This means that MkDocs now has an easier to use interface\nwith better help output.  This change is partially backwards incompatible as while undocumented it was\npossible to pass any configuration option to the different commands. Now only\na small subset of the configuration options can be passed to the commands. To\nsee in full commands and available arguments use  mkdocs --help  and mkdocs build --help  to have them displayed.",
            "title": "New Command Line Interface"
        },
        {
            "location": "/about/release-notes/#support-extra-html-and-xml-files",
            "text": "Like the  extra_javascript  and  extra_css  configuration options, a new\noption named  extra_templates  has been added. This will automatically be\npopulated with any  .html  or  .xml  files in the project docs directory.  Users can place static HTML and XML files and they will be copied over, or they\ncan also use Jinja2 syntax and take advantage of the  global variables .  By default MkDocs will use this approach to create a sitemap for the\ndocumentation.",
            "title": "Support Extra HTML and XML files"
        },
        {
            "location": "/about/release-notes/#other-changes-and-additions-to-version-0130",
            "text": "Add support for  Markdown extension configuration options . (#435)  MkDocs now ships Python  wheels . (#486)  Only include the build date and MkDocs version on the homepage. (#490)  Generate sitemaps for documentation builds. (#436)  Add a clearer way to define nested pages in the configuration. (#482)  Add an  extra config  option for passing arbitrary variables to the template. (#510)  Add  --no-livereload  to  mkdocs serve  for a simpler development server. (#511)  Add copyright display support to all themes (#549)  Add support for custom commit messages in a  mkdocs gh-deploy  (#516)  Bugfix: Fix linking to media within the same directory as a markdown file\n  called index.md (#535)  Bugfix: Fix errors with unicode filenames (#542).",
            "title": "Other Changes and Additions to Version 0.13.0"
        },
        {
            "location": "/about/release-notes/#version-0122-2015-04-22",
            "text": "Bugfix: Fix a regression where there would be an error if some child titles\n  were missing but others were provided in the pages config. (#464)",
            "title": "Version 0.12.2 (2015-04-22)"
        },
        {
            "location": "/about/release-notes/#version-0121-2015-04-14",
            "text": "Bugfix: Fixed a CSS bug in the table of contents on some browsers where the\n  bottom item was not clickable.",
            "title": "Version 0.12.1 (2015-04-14)"
        },
        {
            "location": "/about/release-notes/#version-0120-2015-04-14",
            "text": "Display the current MkDocs version in the CLI output. (#258)  Check for CNAME file when using gh-deploy. (#285)  Add the homepage back to the navigation on all themes. (#271)  Add a strict more for local link checking. (#279)  Add Google analytics support to all themes. (#333)  Add build date and MkDocs version to the ReadTheDocs and MkDocs theme\n  outputs. (#382)  Standardise highlighting across all themes and add missing languages. (#387)  Add a verbose flag. (-v) to show more details about what the build. (#147)  Add the option to specify a remote branch when deploying to GitHub. This\n  enables deploying to GitHub pages on personal and repo sites. (#354)  Add favicon support to the ReadTheDocs theme HTML. (#422)  Automatically refresh the browser when files are edited. (#163)  Bugfix: Never re-write URL's in code blocks. (#240)  Bugfix: Don't copy ditfiles when copying media from the  docs_dir . (#254)  Bugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106)  Bugfix: Add padding to the bottom of all bootstrap themes. (#255)  Bugfix: Fix issues with nested Markdown pages and the automatic pages\n  configuration. (#276)  Bugfix: Fix a URL parsing error with GitHub enterprise. (#284)  Bugfix: Don't error if the mkdocs.yml is completely empty. (#288)  Bugfix: Fix a number of problems with relative urls and Markdown files. (#292)  Bugfix: Don't stop the build if a page can't be found, continue with other\n  pages. (#150)  Bugfix: Remove the site_name from the page title, this needs to be added\n  manually. (#299)  Bugfix: Fix an issue with table of contents cutting off Markdown. (#294)  Bugfix: Fix hostname for BitBucket. (#339)  Bugfix: Ensure all links end with a slash. (#344)  Bugfix: Fix repo links in the readthedocs theme. (#365)  Bugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143)  Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384)  Bugfix: Remove inline CSS in the ReadTheDocs theme. (#393)  Bugfix: Fix problems with the child titles due to the order the pages config\n  was processed. (#395)  Bugfix: Don't error during live reload when the theme doesn't exist. (#373)  Bugfix: Fix problems with the Meta extension when it may not exist. (#398)  Bugfix: Wrap long inline code otherwise they will run off the screen. (#313)  Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to\n  fix problems with titles containing code. (#367)  Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden\n  under the navigation. (#7)  Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295)  Bugfix: Fix an error when passing in a specific config file with\n   mkdocs serve . (#341)  Bugfix: Don't overwrite index.md diles with the  mkdocs new  command. (#412)  Bugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411)  Bugfix: Display images inline in the MkDocs theme. (#415)  Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319)  Bugfix: Don't delete hidden files when using  mkdocs build --clean . (#346)  Bugfix: Don't block newer verions of Python-markdown on Python >= 2.7. (#376)  Bugfix: Fix encoding issues when opening files across platforms. (#428)",
            "title": "Version 0.12.0 (2015-04-14)"
        },
        {
            "location": "/about/release-notes/#version-0111-2014-11-20",
            "text": "Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs\n  theme. (#233)",
            "title": "Version 0.11.1 (2014-11-20)"
        },
        {
            "location": "/about/release-notes/#version-0110-2014-11-18",
            "text": "Render 404.html files if they exist for the current theme. (#194)  Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs\n  and ReadTheDocs themes. (#225)  Bugfix: Fix an issue with the google_analytics code. (#219)  Bugfix: Remove  __pycache__  from the package tar. (#196)  Bugfix: Fix markdown links that go to an anchor on the current page. (#197)  Bugfix: Don't add  prettyprint well  CSS classes to all HTML, only add it in\n  the MkDocs theme. (#183)  Bugfix: Display section titles in the ReadTheDocs theme. (#175)  Bugfix: Use the polling observer in watchdog so rebuilding works on\n  filesystems without inotify. (#184)  Bugfix: Improve error output for common configuration related errors. (#176)",
            "title": "Version 0.11.0 (2014-11-18)"
        },
        {
            "location": "/about/release-notes/#version-0100-2014-10-29",
            "text": "Added support for Python 3.3 and 3.4. (#103)  Configurable Python-Markdown extensions with the config setting\n   markdown_extensions . (#74)  Added  mkdocs json  command to output your rendered\n  documentation as json files. (#128)  Added  --clean  switch to  build ,  json  and  gh-deploy  commands to\n  remove stale files from the output directory. (#157)  Support multiple theme directories to allow replacement of\n  individual templates rather than copying the full theme. (#129)  Bugfix: Fix  <ul>  rendering in readthedocs theme. (#171)  Bugfix: Improve the readthedocs theme on smaller displays. (#168)  Bugfix: Relaxed required python package versions to avoid clashes. (#104)  Bugfix: Fix issue rendering the table of contents with some configs. (#146)  Bugfix: Fix path for embedded images in sub pages. (#138)  Bugfix: Fix  use_directory_urls  config behaviour. (#63)  Bugfix: Support  extra_javascript  and  extra_css  in all themes. (#90)  Bugfix: Fix path-handling under Windows. (#121)  Bugfix: Fix the menu generation in the readthedocs theme. (#110)  Bugfix: Fix the mkdocs command creation under Windows. (#122)  Bugfix: Correctly handle external  extra_javascript  and  extra_css . (#92)  Bugfix: Fixed favicon support. (#87)",
            "title": "Version 0.10.0 (2014-10-29)"
        },
        {
            "location": "/about/contributing/",
            "text": "Contributing to MkDocs\n\uf0c1\n\n\nAn introduction to contributing to the MkDocs project.\n\n\nThe MkDocs project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nReporting an Issue\n\uf0c1\n\n\nPlease include as much detail as you can. Let us know your platform and MkDocs\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.\n\n\nTesting the Development Version\n\uf0c1\n\n\nIf you want to just install and try out the latest development version of\nMkDocs you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is \nstrongly\n recommended\nthat you do this within a \nvirtualenv\n.\n\n\npip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz\n\n\n\n\nInstalling for Development\n\uf0c1\n\n\nFirst you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is \nstrongly\n recommended that you do\nthis within a \nvirtualenv\n.\n\n\npip install --editable .\n\n\n\n\nThis will install MkDocs in development mode which binds the \nmkdocs\n command\nto the git repository.\n\n\nRunning the tests\n\uf0c1\n\n\nTo run the tests, it is recommended that you use \nTox\n. This just needs\nto be pip installed and then the test suite can be ran for MkDocs but running\nthe command \ntox\n in the root of your MkDocs repository.\n\n\nIt will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by \nTravis\n when you submit a pull request.\n\n\nSubmitting Pull Requests\n\uf0c1\n\n\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#contributing-to-mkdocs",
            "text": "An introduction to contributing to the MkDocs project.  The MkDocs project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:   Code patches via pull requests  Documentation improvements  Bug reports and patch reviews",
            "title": "Contributing to MkDocs"
        },
        {
            "location": "/about/contributing/#reporting-an-issue",
            "text": "Please include as much detail as you can. Let us know your platform and MkDocs\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.",
            "title": "Reporting an Issue"
        },
        {
            "location": "/about/contributing/#testing-the-development-version",
            "text": "If you want to just install and try out the latest development version of\nMkDocs you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is  strongly  recommended\nthat you do this within a  virtualenv .  pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz",
            "title": "Testing the Development Version"
        },
        {
            "location": "/about/contributing/#installing-for-development",
            "text": "First you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is  strongly  recommended that you do\nthis within a  virtualenv .  pip install --editable .  This will install MkDocs in development mode which binds the  mkdocs  command\nto the git repository.",
            "title": "Installing for Development"
        },
        {
            "location": "/about/contributing/#running-the-tests",
            "text": "To run the tests, it is recommended that you use  Tox . This just needs\nto be pip installed and then the test suite can be ran for MkDocs but running\nthe command  tox  in the root of your MkDocs repository.  It will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by  Travis  when you submit a pull request.",
            "title": "Running the tests"
        },
        {
            "location": "/about/contributing/#submitting-pull-requests",
            "text": "Once you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Submitting Pull Requests"
        },
        {
            "location": "/about/license/",
            "text": "License\n\uf0c1\n\n\nThe legal stuff.\n\n\n\n\nIncluded projects\n\uf0c1\n\n\nThemes used under license from the ReadTheDocs projects.\n\n\n\n\nReadTheDocs theme - \nView license\n.\n\n\n\n\nMany thanks to the authors and contributors of those wonderful projects.\n\n\nMkDocs License (BSD)\n\uf0c1\n\n\nCopyright \u00a9 2014, Tom Christie. All rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\nRedistributions of source code must retain the above copyright notice, this list\nof conditions and the following disclaimer. Redistributions in binary form must\nreproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the\ndistribution.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "The legal stuff.",
            "title": "License"
        },
        {
            "location": "/about/license/#included-projects",
            "text": "Themes used under license from the ReadTheDocs projects.   ReadTheDocs theme -  View license .   Many thanks to the authors and contributors of those wonderful projects.",
            "title": "Included projects"
        },
        {
            "location": "/about/license/#mkdocs-license-bsd",
            "text": "Copyright \u00a9 2014, Tom Christie. All rights reserved.  Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list\nof conditions and the following disclaimer. Redistributions in binary form must\nreproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the\ndistribution.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "MkDocs License (BSD)"
        }
    ]
}